{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Music Besties Documentation","text":""},{"location":"#version-information","title":"Version Information","text":"Type Version Last Updated Changes Application 1.0.0 01 May 2025 Initial release Documentation 1.0.2 08 May 2025 13:02 \u2022 Removed redundant files\u2022 Fixed diagram rendering\u2022 Improved Mermaid styling\u2022 Added diagram style guide\u2022 Implemented version control system <p>This documentation is maintained in the music-besties-docs-app repository and deployed to GitHub Pages.</p>"},{"location":"#welcome-to-the-music-besties-documentation","title":"Welcome to the Music Besties Documentation","text":"<p>Music Besties is a web application that helps users organize, rank, and review music albums. This documentation provides comprehensive information about the application, including its current state, future plans, and design system.</p>"},{"location":"diagram_index/","title":"Diagram Index","text":"<p>This page serves as a comprehensive reference for all diagrams in the Music Besties documentation.</p>"},{"location":"diagram_index/#comprehensive-diagram-reference","title":"Comprehensive Diagram Reference","text":"Category Diagram Name Location Format Description Last Updated Architecture Application Architecture <code>application_overview.md</code> Mermaid Flowchart showing main components and their relationships 2025-05-08 Architecture Component Hierarchy <code>components.md</code> Mermaid Tree diagram showing Vue.js component inheritance 2025-05-08 Data Structure Data Structure Model <code>data_handling.md</code> Mermaid Class diagram of core data entities and relationships 2025-05-08 Data Structure LocalStorage Data Structure <code>data_handling.md</code> Mermaid ER diagram showing browser storage organization 2025-05-08 User Flow Ranking Interaction Flow <code>user_interactions.md</code> Mermaid Sequence diagram of ranking process 2025-05-08 User Flow User Navigation Flow <code>user_experience.md</code> Mermaid Flowchart of user navigation paths 2025-05-08 Component DashboardCard Component <code>components.md</code> Markdown Table Props, events, and usage of DashboardCard 2025-05-08 Component SidebarPanel Component <code>components.md</code> Markdown Table Props, events, and usage of SidebarPanel 2025-05-08 Component EditRankingsTabs Component <code>components.md</code> Markdown Table Props, events, and usage of EditRankingsTabs 2025-05-08 UI Layout Dashboard Screen Layout <code>screens.md</code> ASCII/Markdown Visual representation of Dashboard UI 2025-05-08 UI Layout Edit Rankings Screen Layout <code>screens.md</code> ASCII/Markdown Visual representation of Rankings UI 2025-05-08 UI Layout Album Sidebar Panel Layout <code>components.md</code> Markdown Table Visual representation of Sidebar UI 2025-05-08 Developer Dashboard Component Structure <code>developer_debugger.md</code> ASCII Component tree for Dashboard screen 2025-05-08 Developer Edit Rankings Component Structure <code>developer_debugger.md</code> ASCII Component tree for Edit Rankings screen 2025-05-08 Reference State Dependencies Table <code>developer_debugger.md</code> Markdown Table Component state dependencies 2025-05-08 Reference Album Emoji Reference <code>design_system/foundations.md</code> Code Block Album emoji associations 2025-05-08 Reference Screens Summary Table <code>screens.md</code> Markdown Table Overview of all application screens 2025-05-08"},{"location":"diagram_index/#diagram-types","title":"Diagram Types","text":"<p>The Music Besties documentation uses several types of diagrams to represent different aspects of the application:</p> <ol> <li>Mermaid Diagrams: Interactive diagrams rendered from code blocks for flows, structures, and relationships</li> <li>Markdown Tables: Structured information presented in tabular format for specifications and references</li> <li>ASCII Diagrams: Simple text-based visualizations for component hierarchies and structures</li> <li>Code Blocks: Formatted code examples that illustrate implementation details</li> </ol>"},{"location":"diagram_index/#usage-guidelines","title":"Usage Guidelines","text":"<ul> <li>Click on any diagram name to navigate directly to that diagram in the documentation</li> <li>All Mermaid diagrams are interactive - hover over elements for additional information</li> <li>For consistency, new diagrams should follow the Mermaid Diagram Style Guide</li> <li>When referencing diagrams in documentation, use the exact diagram name as listed in this index</li> </ul>"},{"location":"core_functions/api_documentation/","title":"API Documentation","text":"<p>This document provides comprehensive documentation for the APIs used in the Music Besties application.</p>"},{"location":"core_functions/api_documentation/#api-overview","title":"API Overview","text":"<p>[Overview of the APIs used in the application]</p>"},{"location":"core_functions/api_documentation/#authentication","title":"Authentication","text":""},{"location":"core_functions/api_documentation/#authentication-methods","title":"Authentication Methods","text":"<p>[Description of authentication methods]</p>"},{"location":"core_functions/api_documentation/#api-keys","title":"API Keys","text":"<p>[Description of API key management]</p>"},{"location":"core_functions/api_documentation/#endpoints","title":"Endpoints","text":""},{"location":"core_functions/api_documentation/#user-management","title":"User Management","text":""},{"location":"core_functions/api_documentation/#get-user-profile","title":"Get User Profile","text":"<p>Endpoint: <code>GET /api/users/{userId}</code></p> <p>Description: Retrieves a user's profile information.</p> <p>Parameters: - <code>userId</code> (path parameter): The ID of the user to retrieve.</p> <p>Response: <pre><code>{\n  \"userId\": \"string\",\n  \"username\": \"string\",\n  \"email\": \"string\",\n  \"profilePicture\": \"string\",\n  \"createdAt\": \"string\",\n  \"updatedAt\": \"string\"\n}\n</code></pre></p> <p>Status Codes: - 200: Success - 404: User not found - 500: Server error</p>"},{"location":"core_functions/api_documentation/#music-management","title":"Music Management","text":""},{"location":"core_functions/api_documentation/#get-music-recommendations","title":"Get Music Recommendations","text":"<p>Endpoint: <code>GET /api/music/recommendations</code></p> <p>Description: Retrieves music recommendations for a user.</p> <p>Parameters: - <code>userId</code> (query parameter): The ID of the user to get recommendations for. - <code>limit</code> (query parameter, optional): The maximum number of recommendations to return.</p> <p>Response: <pre><code>{\n  \"recommendations\": [\n    {\n      \"id\": \"string\",\n      \"title\": \"string\",\n      \"artist\": \"string\",\n      \"album\": \"string\",\n      \"coverArt\": \"string\",\n      \"previewUrl\": \"string\"\n    }\n  ]\n}\n</code></pre></p> <p>Status Codes: - 200: Success - 400: Invalid request - 500: Server error</p>"},{"location":"core_functions/api_documentation/#error-handling","title":"Error Handling","text":""},{"location":"core_functions/api_documentation/#error-codes","title":"Error Codes","text":"<p>[Description of error codes]</p>"},{"location":"core_functions/api_documentation/#error-responses","title":"Error Responses","text":"<p>[Description of error responses]</p>"},{"location":"core_functions/api_documentation/#rate-limiting","title":"Rate Limiting","text":"<p>[Description of rate limiting]</p>"},{"location":"core_functions/api_documentation/#versioning","title":"Versioning","text":"<p>[Description of API versioning]</p>"},{"location":"core_functions/api_documentation/#deprecation-policy","title":"Deprecation Policy","text":"<p>[Description of API deprecation policy]</p>"},{"location":"core_functions/deployment/","title":"Deployment and Infrastructure","text":"<p>This document outlines the deployment and infrastructure considerations for the Music Besties application.</p>"},{"location":"core_functions/deployment/#deployment-architecture","title":"Deployment Architecture","text":"<p>[Description of the deployment architecture]</p>"},{"location":"core_functions/deployment/#environment-strategy","title":"Environment Strategy","text":"<ul> <li>Development</li> <li>Staging</li> <li>Production</li> </ul>"},{"location":"core_functions/deployment/#infrastructure-components","title":"Infrastructure Components","text":"<p>[Description of infrastructure components]</p>"},{"location":"core_functions/deployment/#deployment-process","title":"Deployment Process","text":""},{"location":"core_functions/deployment/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>[Description of CI/CD pipeline]</p>"},{"location":"core_functions/deployment/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>[Step 1]</li> <li>[Step 2]</li> <li>[Step 3]</li> </ol>"},{"location":"core_functions/deployment/#rollback-procedures","title":"Rollback Procedures","text":"<p>[Description of rollback procedures]</p>"},{"location":"core_functions/deployment/#infrastructure-as-code","title":"Infrastructure as Code","text":""},{"location":"core_functions/deployment/#configuration-management","title":"Configuration Management","text":"<p>[Description of configuration management]</p>"},{"location":"core_functions/deployment/#infrastructure-provisioning","title":"Infrastructure Provisioning","text":"<p>[Description of infrastructure provisioning]</p>"},{"location":"core_functions/deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"core_functions/deployment/#application-monitoring","title":"Application Monitoring","text":"<p>[Description of application monitoring]</p>"},{"location":"core_functions/deployment/#infrastructure-monitoring","title":"Infrastructure Monitoring","text":"<p>[Description of infrastructure monitoring]</p>"},{"location":"core_functions/deployment/#logging-strategy","title":"Logging Strategy","text":"<p>[Description of logging strategy]</p>"},{"location":"core_functions/deployment/#scaling-strategy","title":"Scaling Strategy","text":""},{"location":"core_functions/deployment/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>[Description of horizontal scaling]</p>"},{"location":"core_functions/deployment/#vertical-scaling","title":"Vertical Scaling","text":"<p>[Description of vertical scaling]</p>"},{"location":"core_functions/deployment/#auto-scaling","title":"Auto-scaling","text":"<p>[Description of auto-scaling]</p>"},{"location":"core_functions/deployment/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"core_functions/deployment/#backup-strategy","title":"Backup Strategy","text":"<p>[Description of backup strategy]</p>"},{"location":"core_functions/deployment/#recovery-procedures","title":"Recovery Procedures","text":"<p>[Description of recovery procedures]</p>"},{"location":"core_functions/deployment/#security-considerations","title":"Security Considerations","text":""},{"location":"core_functions/deployment/#network-security","title":"Network Security","text":"<p>[Description of network security]</p>"},{"location":"core_functions/deployment/#access-control","title":"Access Control","text":"<p>[Description of access control]</p>"},{"location":"core_functions/documentation_guide/","title":"Documentation Guide","text":"<p>This document provides guidelines for maintaining and updating the Music Besties documentation.</p>"},{"location":"core_functions/documentation_guide/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation follows this structure:</p> <ol> <li>Current State (vX.Y)</li> <li>Application Overview</li> <li>Core Screens</li> <li>Component Details</li> <li>User Interactions</li> <li>Technical Implementation</li> <li>User Experience</li> <li>Developer Guide</li> <li> <p>Patch History</p> </li> <li> <p>Sprint to Next State (vX.Z)</p> </li> <li>Sprint Plan</li> <li>Impact Analysis</li> <li>Possible Solutions</li> <li>Final Solution</li> <li>Implementation Plan</li> <li> <p>Sprint Retrospective</p> </li> <li> <p>Next State (vX.Z)</p> </li> <li>Application Overview</li> <li>Core Screens</li> <li>Component Details</li> <li>User Interactions</li> <li>Technical Implementation</li> <li>User Experience</li> <li> <p>Developer Guide</p> </li> <li> <p>Future States</p> </li> <li>Future State Backlog</li> <li> <p>Future State Vision</p> </li> <li> <p>Core Functions</p> </li> <li>Design System</li> <li>Security Considerations</li> <li>API Documentation</li> <li>Deployment and Infrastructure</li> <li> <p>Documentation Guide</p> </li> <li> <p>Troubleshooting and Known Issues</p> </li> </ol>"},{"location":"core_functions/documentation_guide/#documentation-standards","title":"Documentation Standards","text":""},{"location":"core_functions/documentation_guide/#markdown-guidelines","title":"Markdown Guidelines","text":"<ul> <li>Use proper Markdown syntax for headings, lists, tables, and code blocks</li> <li>Use heading levels appropriately (H1 for page title, H2 for major sections, etc.)</li> <li>Use code blocks with appropriate language specification for code examples</li> </ul>"},{"location":"core_functions/documentation_guide/#content-guidelines","title":"Content Guidelines","text":"<ul> <li>Keep content clear, concise, and focused</li> <li>Use consistent terminology throughout the documentation</li> <li>Include examples and visuals where appropriate</li> <li>Update documentation alongside code changes</li> </ul>"},{"location":"core_functions/documentation_guide/#diagrams","title":"Diagrams","text":"<ul> <li>Use Mermaid for diagrams when possible</li> <li>Include alt text for all diagrams</li> <li>Keep diagrams simple and focused on a single concept</li> </ul>"},{"location":"core_functions/documentation_guide/#documentation-workflow","title":"Documentation Workflow","text":""},{"location":"core_functions/documentation_guide/#adding-new-documentation","title":"Adding New Documentation","text":"<ol> <li>Identify the appropriate section for the new documentation</li> <li>Create a new Markdown file in the corresponding directory</li> <li>Update the navigation in <code>mkdocs.yml</code> if necessary</li> <li>Follow the established format for similar documents</li> </ol>"},{"location":"core_functions/documentation_guide/#updating-existing-documentation","title":"Updating Existing Documentation","text":"<ol> <li>Identify the document to update</li> <li>Make the necessary changes</li> <li>Update the \"Last Updated\" date if applicable</li> <li>Update any related documents if necessary</li> </ol>"},{"location":"core_functions/documentation_guide/#documentation-review-process","title":"Documentation Review Process","text":"<ol> <li>Self-review for clarity, accuracy, and completeness</li> <li>Peer review by another team member</li> <li>Technical review by a subject matter expert if necessary</li> <li>Final approval before publication</li> </ol>"},{"location":"core_functions/documentation_guide/#version-control","title":"Version Control","text":"<ul> <li>Document version numbers should match the application version they describe</li> <li>Use the format vX.Y.Z (Major.Minor.Patch)</li> <li>Include version history in each document when appropriate</li> </ul>"},{"location":"core_functions/documentation_guide/#publishing-process","title":"Publishing Process","text":"<ol> <li>Build the documentation locally to verify changes</li> <li>Deploy to the documentation site</li> <li>Verify the published documentation</li> </ol>"},{"location":"core_functions/mermaid_diagram_guide/","title":"Mermaid Diagram Style Guide","text":"<p>This guide provides standards for creating consistent diagrams in the Music Besties documentation.</p>"},{"location":"core_functions/mermaid_diagram_guide/#diagram-types-and-usage","title":"Diagram Types and Usage","text":"Diagram Type Best Used For Example Usage Flowchart Component relationships, processes Application architecture, component hierarchy Sequence Interaction flows, API calls User interactions, data flow between components Class Data structures, object models Data management, state structure ER Database relationships Data storage models Gantt Project timelines Implementation plans, sprint schedules State State transitions User flows, application states"},{"location":"core_functions/mermaid_diagram_guide/#color-standards","title":"Color Standards","text":"<p>Use these standardized colors for consistency across all diagrams:</p> Diagram Type Element Type Color Code Usage All Types Primary/Main <code>#3b82f6</code> (Blue) Main components, primary actions All Types Secondary <code>#f97316</code> (Orange) Secondary components, user actions All Types Tertiary <code>#8b5cf6</code> (Purple) Supporting elements All Types Success <code>#10b981</code> (Green) Success states, completed actions All Types Warning <code>#f59e0b</code> (Amber) Warning states, caution actions All Types Error <code>#ef4444</code> (Red) Error states, destructive actions Flowchart Background <code>#f4f6f8</code> (Light gray) Flowchart background Class/ER Background <code>#eef2ff</code> (Light indigo) Data structure background Sequence Background <code>#f0fdf4</code> (Light green) User flow background"},{"location":"core_functions/mermaid_diagram_guide/#styling-examples","title":"Styling Examples","text":""},{"location":"core_functions/mermaid_diagram_guide/#flowchart-example","title":"Flowchart Example","text":"<pre><code>flowchart TD\n    A[Primary Component] --&gt; B[Secondary Component]\n    A --&gt; C[Tertiary Component]\n\n    classDef primary fill:#3b82f6,stroke:#1e40af,stroke-width:1px,color:white\n    classDef secondary fill:#f97316,stroke:#c2410c,stroke-width:1px,color:white\n    classDef tertiary fill:#8b5cf6,stroke:#6d28d9,stroke-width:1px,color:white\n\n    class A primary\n    class B secondary\n    class C tertiary</code></pre> Figure: Component Relationship Example - Shows how components connect in the application. Primary component (blue) connects to both secondary (orange) and tertiary (purple) components."},{"location":"core_functions/mermaid_diagram_guide/#sequence-diagram-example","title":"Sequence Diagram Example","text":"<pre><code>sequenceDiagram\n    participant User\n    participant App as Application\n    participant DB as Database\n\n    User-&gt;&gt;App: Action\n    App-&gt;&gt;DB: Query\n    DB--&gt;&gt;App: Response\n    App--&gt;&gt;User: Update UI\n\n    note over App,DB: Data processing occurs here</code></pre> Figure: User Interaction Flow - Illustrates the sequence of events when a user interacts with the application. Shows data flow between user, application, and storage layers."},{"location":"core_functions/mermaid_diagram_guide/#class-diagram-example","title":"Class Diagram Example","text":"<pre><code>classDiagram\n    class MainClass {\n        +String property\n        +method() void\n    }\n    class RelatedClass {\n        +String property\n        +method() void\n    }\n    MainClass --&gt; RelatedClass: references</code></pre> Figure: Data Structure Model - Shows the relationship between main and related classes. The main class references the related class."},{"location":"core_functions/mermaid_diagram_guide/#er-diagram-example","title":"ER Diagram Example","text":"<pre><code>erDiagram\n    USER ||--o{ ALBUM : creates\n    ALBUM ||--|{ SONG : contains\n    USER ||--o{ REVIEW : writes\n\n    USER {\n        string username\n        string preferences\n    }\n    ALBUM {\n        string id\n        string title\n        string emoji\n    }\n    SONG {\n        string title\n        number trackNumber\n    }</code></pre> Figure: Data Relationship Model - Shows the relationships between users, albums, songs, and reviews in the application's data structure."},{"location":"core_functions/mermaid_diagram_guide/#best-practices","title":"Best Practices","text":""},{"location":"core_functions/mermaid_diagram_guide/#for-all-diagram-types","title":"For All Diagram Types","text":"<ol> <li>Keep diagrams simple - Focus on the key information you want to convey</li> <li>Use consistent naming - Use the same terminology across all diagrams</li> <li>Add descriptive labels - Make edge labels descriptive but concise</li> <li>Include a caption - Always add a caption using the <code>mermaid-caption</code> class</li> <li>Test responsiveness - Ensure diagrams render well on different screen sizes</li> <li>Add hover tooltips - Use the interactive features for additional context</li> </ol>"},{"location":"core_functions/mermaid_diagram_guide/#diagram-specific-guidelines","title":"Diagram-Specific Guidelines","text":""},{"location":"core_functions/mermaid_diagram_guide/#mermaid-diagrams","title":"Mermaid Diagrams","text":"<ul> <li>Use the standard color palette defined in this guide</li> <li>Add notes to explain complex interactions</li> <li>Keep node labels short and descriptive</li> <li>Use the caption to explain the diagram's purpose and key elements</li> </ul>"},{"location":"core_functions/mermaid_diagram_guide/#markdown-tables","title":"Markdown Tables","text":"<ul> <li>Use consistent column widths</li> <li>Include headers for all columns</li> <li>Add a caption below the table using italics</li> <li>Consider adding a \"Last Updated\" row for reference tables</li> </ul>"},{"location":"core_functions/mermaid_diagram_guide/#ascii-diagrams","title":"ASCII Diagrams","text":"<ul> <li>Use consistent characters for similar elements</li> <li>Include a legend explaining the symbols</li> <li>Maintain consistent spacing and alignment</li> <li>Consider converting complex ASCII diagrams to Mermaid</li> </ul>"},{"location":"core_functions/mermaid_diagram_guide/#code-blocks","title":"Code Blocks","text":"<ul> <li>Use consistent indentation</li> <li>Add comments to explain complex sections</li> <li>Include file name and purpose in comments</li> <li>Use syntax highlighting appropriate for the language</li> </ul>"},{"location":"core_functions/mermaid_diagram_guide/#accessibility-considerations","title":"Accessibility Considerations","text":"<ul> <li>Ensure sufficient color contrast for all elements (minimum 4.5:1 ratio)</li> <li>Don't rely solely on color to convey information</li> <li>Add descriptive text captions for all diagrams</li> <li>Use patterns or shapes in addition to colors when possible</li> <li>Ensure all diagrams have text alternatives</li> </ul>"},{"location":"core_functions/mermaid_diagram_guide/#technical-implementation","title":"Technical Implementation","text":""},{"location":"core_functions/mermaid_diagram_guide/#mermaid-configuration","title":"Mermaid Configuration","text":"<p>The global Mermaid configuration provides: - Consistent styling across all diagram types - Dark mode support - Responsive rendering - Interactive features (node highlighting on hover/click) - Diagram-specific color schemes</p>"},{"location":"core_functions/mermaid_diagram_guide/#css-enhancements","title":"CSS Enhancements","text":"<p>Custom CSS has been implemented for: - Mermaid diagrams (<code>mermaid-custom.css</code>) - Markdown tables (<code>table-styles.css</code>) - ASCII diagrams (<code>ascii-diagram.css</code>) - Code blocks (<code>code-blocks.css</code>)</p>"},{"location":"core_functions/mermaid_diagram_guide/#standard-templates","title":"Standard Templates","text":"<p>When creating new diagrams, use these templates for consistency:</p> <pre><code>&lt;!-- Mermaid diagram template --&gt;\n```mermaid\n[diagram code here]\n</code></pre> Figure: [Diagram Name] - [Brief description]. [Key elements explanation]. <pre><code>[ASCII diagram here]\n</code></pre> Symbol \u2192 Meaning Filename.js <pre><code>// PURPOSE: Brief description\n// LAST UPDATED: YYYY-MM-DD\n\n// Code here\n</code></pre> Last updated: YYYY-MM-DD <p>```</p>"},{"location":"core_functions/security/","title":"Security Considerations","text":"<p>This document outlines the security considerations for the Music Besties application.</p>"},{"location":"core_functions/security/#authentication-and-authorization","title":"Authentication and Authorization","text":""},{"location":"core_functions/security/#user-authentication","title":"User Authentication","text":"<p>[Description of user authentication mechanisms]</p>"},{"location":"core_functions/security/#authorization-model","title":"Authorization Model","text":"<p>[Description of the authorization model]</p>"},{"location":"core_functions/security/#session-management","title":"Session Management","text":"<p>[Description of session management]</p>"},{"location":"core_functions/security/#data-protection","title":"Data Protection","text":""},{"location":"core_functions/security/#data-at-rest","title":"Data at Rest","text":"<p>[Description of data protection at rest]</p>"},{"location":"core_functions/security/#data-in-transit","title":"Data in Transit","text":"<p>[Description of data protection in transit]</p>"},{"location":"core_functions/security/#personal-data-handling","title":"Personal Data Handling","text":"<p>[Description of personal data handling]</p>"},{"location":"core_functions/security/#secure-development-practices","title":"Secure Development Practices","text":""},{"location":"core_functions/security/#code-security","title":"Code Security","text":"<p>[Description of code security practices]</p>"},{"location":"core_functions/security/#dependency-management","title":"Dependency Management","text":"<p>[Description of dependency management practices]</p>"},{"location":"core_functions/security/#security-testing","title":"Security Testing","text":"<p>[Description of security testing practices]</p>"},{"location":"core_functions/security/#compliance","title":"Compliance","text":""},{"location":"core_functions/security/#regulatory-compliance","title":"Regulatory Compliance","text":"<p>[Description of regulatory compliance]</p>"},{"location":"core_functions/security/#privacy-compliance","title":"Privacy Compliance","text":"<p>[Description of privacy compliance]</p>"},{"location":"core_functions/security/#incident-response","title":"Incident Response","text":""},{"location":"core_functions/security/#security-incident-response-plan","title":"Security Incident Response Plan","text":"<p>[Description of security incident response plan]</p>"},{"location":"core_functions/security/#vulnerability-management","title":"Vulnerability Management","text":"<p>[Description of vulnerability management]</p>"},{"location":"core_functions/security/#security-roadmap","title":"Security Roadmap","text":"<p>[Description of security roadmap]</p>"},{"location":"core_functions/version_control_guide/","title":"Version Control Guide","text":"<p>This guide outlines the version control process for the Music Besties application and its documentation.</p>"},{"location":"core_functions/version_control_guide/#version-numbering-system","title":"Version Numbering System","text":"<p>The Music Besties project uses a linked versioning system:</p> <ol> <li>Application Version: Uses semantic versioning (MAJOR.MINOR.PATCH)</li> <li>MAJOR: Breaking changes</li> <li>MINOR: New features, backward compatible</li> <li> <p>PATCH: Bug fixes, backward compatible</p> </li> <li> <p>Documentation Version: Uses semantic versioning (MAJOR.MINOR.PATCH)</p> </li> <li>MAJOR: Must match the application major version</li> <li>MINOR: Significant documentation updates</li> <li>PATCH: Small fixes and improvements</li> </ol>"},{"location":"core_functions/version_control_guide/#version-update-requirements","title":"Version Update Requirements","text":""},{"location":"core_functions/version_control_guide/#when-to-update-versions","title":"When to Update Versions","text":"Change Type App Version Docs Version App functionality change Update as needed Update major to match app Major documentation restructuring No change Update minor version Documentation fixes/improvements No change Update patch version GitHub Pages deployment No change Update patch version"},{"location":"core_functions/version_control_guide/#required-updates-with-each-commit","title":"Required Updates with Each Commit","text":"<p>For every commit to the documentation repository:</p> <ol> <li>Update the Documentation Version in index.md</li> <li>Update the Last Updated timestamp</li> <li>Add a brief entry to the Changes column</li> <li>Ensure the Application Version major number matches the Documentation Version</li> </ol>"},{"location":"core_functions/version_control_guide/#implementation-locations","title":"Implementation Locations","text":"<p>Version information is maintained in the following locations:</p> <ol> <li>Primary: index.md (Version Information table)</li> <li>README.md: Contains a reminder about version updates</li> <li>GitHub PR Template: Includes a version update checklist</li> <li>mkdocs.yml: Contains a reminder comment</li> </ol>"},{"location":"core_functions/version_control_guide/#deployment-process","title":"Deployment Process","text":"<p>When deploying updates to GitHub Pages:</p> <ol> <li>Build the documentation locally: <code>python -m mkdocs build</code></li> <li>Verify all changes are correct</li> <li>Update version information in index.md</li> <li>Deploy to GitHub Pages: <code>python -m mkdocs gh-deploy</code></li> <li>Create a chat log summary following the established procedure</li> </ol>"},{"location":"core_functions/version_control_guide/#version-history","title":"Version History","text":"<p>Maintain a concise version history in the index.md file, showing: - Most recent version at the top - Brief bullet points of key changes - Date of update</p>"},{"location":"core_functions/version_control_guide/#best-practices","title":"Best Practices","text":"<ol> <li>Consistency: Always follow the versioning system</li> <li>Clarity: Make change descriptions clear and concise</li> <li>Completeness: Update all version references</li> <li>Communication: Document all significant changes</li> </ol>"},{"location":"core_functions/design_system/","title":"Design System Overview","text":"<p>This design system documents the visual language and UI components of the Music Besties application. It serves as a reference for designers and developers to maintain consistency across the application.</p>"},{"location":"core_functions/design_system/#purpose","title":"Purpose","text":"<p>This design system ensures visual consistency across the Music Besties app, improves collaboration between design and development, and documents the existing UI patterns.</p>"},{"location":"core_functions/design_system/#goals","title":"Goals","text":"<ul> <li>Maintain a cohesive user experience across all features</li> <li>Document the current design patterns</li> <li>Establish a shared visual language</li> <li>Provide a reference for future development</li> </ul>"},{"location":"core_functions/design_system/#audience","title":"Audience","text":"<ul> <li>Designers working on the Music Besties app</li> <li>Developers implementing the UI components</li> <li>Anyone involved in maintaining or extending the application</li> </ul>"},{"location":"core_functions/design_system/#guiding-principles","title":"Guiding Principles","text":"<ul> <li>User-friendly: The interface should be intuitive and easy to use</li> <li>Intuitive: Users should be able to understand how to interact with the app without extensive instructions</li> <li>Accessible: The app should be usable by people with various abilities</li> <li>Focused: The design should support the core functionality of music ranking</li> </ul>"},{"location":"core_functions/design_system/#how-to-use-this-design-system","title":"How to Use This Design System","text":"<p>This design system is organized into several sections:</p> <ol> <li>Foundations: The basic building blocks of the design system, including colors, typography, spacing, and effects</li> <li>Components: Detailed documentation of UI components used in the application</li> <li>Patterns: Common layout patterns and how components are arranged</li> <li>Accessibility: Guidelines for ensuring the application is accessible to all users</li> <li>Responsive Design: How the application adapts to different screen sizes</li> </ol> <p>Each component documentation includes: - Visual examples - Usage guidelines - Variations and states - Implementation considerations</p>"},{"location":"core_functions/design_system/#relationship-to-code","title":"Relationship to Code","text":"<p>This design system documents the actual implementation of the Music Besties application. It reflects the current state of the codebase and should be updated as the application evolves.</p>"},{"location":"core_functions/design_system/accessibility/","title":"Accessibility Guidelines","text":"<p>This section documents the accessibility features and guidelines implemented in the Music Besties application. Following these guidelines ensures that the application is usable by people with various abilities.</p>"},{"location":"core_functions/design_system/accessibility/#standards-compliance","title":"Standards Compliance","text":"<p>The Music Besties application aims to comply with WCAG 2.1 AA standards. This includes:</p> <ul> <li>Perceivable: Information and user interface components must be presentable to users in ways they can perceive</li> <li>Operable: User interface components and navigation must be operable</li> <li>Understandable: Information and the operation of the user interface must be understandable</li> <li>Robust: Content must be robust enough to be interpreted by a wide variety of user agents</li> </ul>"},{"location":"core_functions/design_system/accessibility/#color-contrast","title":"Color Contrast","text":"<p>The application uses color combinations that provide sufficient contrast for users with visual impairments.</p> <pre><code>/* From styles.css */\n.chip-rank-indicator { \n    background-color: #1e3a8a; \n    color: white; \n}\n</code></pre> <ul> <li>Text colors maintain sufficient contrast with backgrounds</li> <li>Interactive elements have distinct focus states</li> <li>Color is not used as the only means of conveying information</li> </ul>"},{"location":"core_functions/design_system/accessibility/#keyboard-navigation","title":"Keyboard Navigation","text":"<p>All interactive elements in the application are accessible via keyboard navigation.</p> <pre><code>/* From styles.css */\n.chip:focus-visible, \n.tab-button:focus-visible, \nbutton:focus-visible, \n[tabindex=\"0\"]:focus-visible, \n.dashboard-grid-card:focus-visible, \n.star-rating input:focus-visible + label, \n.sidebar-tab-button:focus-visible {\n    outline: 2px solid #3b82f6; \n    outline-offset: 2px; \n    border-radius: 4px;\n}\n</code></pre> <ul> <li>All interactive elements have visible focus states</li> <li>Tab order follows a logical sequence</li> <li>Custom interactive elements use appropriate tabindex values</li> <li>Keyboard shortcuts are documented where applicable</li> </ul>"},{"location":"core_functions/design_system/accessibility/#focus-management","title":"Focus Management","text":"<p>The application implements proper focus management for interactive elements and modal dialogs.</p> <pre><code>/* From styles.css */\n.chip:focus-visible, \n.tab-button:focus-visible, \nbutton:focus-visible, \n[tabindex=\"0\"]:focus-visible, \n.dashboard-grid-card:focus-visible, \n.star-rating input:focus-visible + label, \n.sidebar-tab-button:focus-visible {\n    outline: 2px solid #3b82f6; \n    outline-offset: 2px; \n    border-radius: 4px;\n}\n</code></pre> <ul> <li>Focus states use a 2px blue outline with 2px offset</li> <li>Focus is trapped within modal dialogs when open</li> <li>Focus is returned to the triggering element when a dialog is closed</li> <li>Focus is managed appropriately when navigating between views</li> </ul>"},{"location":"core_functions/design_system/accessibility/#semantic-html","title":"Semantic HTML","text":"<p>The application uses semantic HTML elements to improve accessibility and provide better structure.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;nav id=\"tab-buttons\" class=\"-mb-px flex space-x-1 sm:space-x-2 px-4\" aria-label=\"Tabs\"&gt;&lt;/nav&gt;\n</code></pre> <ul> <li>Semantic elements like <code>nav</code>, <code>button</code>, <code>h1</code>-<code>h6</code> are used appropriately</li> <li>ARIA attributes are used where needed to enhance semantics</li> <li>Elements have appropriate roles and labels</li> </ul>"},{"location":"core_functions/design_system/accessibility/#text-alternatives","title":"Text Alternatives","text":"<p>The application provides text alternatives for non-text content.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;button id=\"sidebar-close-btn\" @click=\"closeSidebar\" class=\"sidebar-close-btn no-hover-highlight active:bg-gray-200\" aria-label=\"Close sidebar\"&gt;&amp;times;&lt;/button&gt;\n</code></pre> <ul> <li>Images and icons have appropriate alt text or aria-labels</li> <li>Emoji have text descriptions where needed</li> <li>Complex UI components have appropriate ARIA attributes</li> </ul>"},{"location":"core_functions/design_system/accessibility/#touch-and-pointer-accessibility","title":"Touch and Pointer Accessibility","text":"<p>The application is designed to be usable with various input methods, including touch.</p> <pre><code>/* From styles.css */\n.no-hover-highlight { \n    -webkit-tap-highlight-color: transparent; \n}\n</code></pre> <ul> <li>Touch targets are large enough (at least 44x44 pixels)</li> <li>Interactive elements have appropriate hover and active states</li> <li>Custom tap highlight behavior is implemented where needed</li> </ul>"},{"location":"core_functions/design_system/accessibility/#screen-reader-support","title":"Screen Reader Support","text":"<p>The application is designed to work well with screen readers.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;nav id=\"tab-buttons\" class=\"-mb-px flex space-x-1 sm:space-x-2 px-4\" aria-label=\"Tabs\"&gt;&lt;/nav&gt;\n</code></pre> <ul> <li>ARIA landmarks are used to define regions of the page</li> <li>Dynamic content changes are announced appropriately</li> <li>Form controls have associated labels</li> <li>Custom components use appropriate ARIA roles and states</li> </ul>"},{"location":"core_functions/design_system/accessibility/#implementation-checklist","title":"Implementation Checklist","text":"<p>When implementing or modifying components, ensure that:</p> <ul> <li>[ ] Component is keyboard navigable</li> <li>[ ] Component has visible focus states</li> <li>[ ] Component uses semantic HTML where possible</li> <li>[ ] Component has appropriate ARIA attributes</li> <li>[ ] Text has sufficient color contrast</li> <li>[ ] Interactive elements have adequate size for touch</li> <li>[ ] Component works with screen readers</li> </ul>"},{"location":"core_functions/design_system/components/","title":"UI Components","text":"<p>This section documents the core UI components used in the Music Besties application. Each component is described with its visual style, variations, and usage guidelines.</p>"},{"location":"core_functions/design_system/components/#buttons","title":"Buttons","text":"<p>Buttons are interactive elements that trigger actions in the application.</p>"},{"location":"core_functions/design_system/components/#visual-style","title":"Visual Style","text":"<ul> <li>Primary buttons use blue/green backgrounds with white text</li> <li>Secondary/cancel buttons use red text or gray backgrounds</li> <li>All buttons have rounded corners (border-radius: 0.375rem)</li> <li>Padding: 0.5rem 1rem (py-2 px-4) for primary, 0.25rem 0.75rem (py-1 px-3) for secondary</li> </ul> <pre><code>/* From styles.css */\nbutton:focus-visible {\n    outline: 2px solid #3b82f6; \n    outline-offset: 2px; \n    border-radius: 4px;\n}\n\nbutton {\n    transition: all 0.15s ease-in-out;\n}\n</code></pre>"},{"location":"core_functions/design_system/components/#variations-and-states","title":"Variations and States","text":"Variation Style Usage Primary Action Blue background (#3b82f6), white text Main actions (Edit) Confirm/Save Green background (#10b981), white text Save actions Cancel/Destructive Red text (#dc2626), transparent background Cancel actions Secondary Gray background (#f3f4f6), dark text Alternative actions Active Darker shade of the button color When pressed Focus 2px blue outline with 2px offset Keyboard focus"},{"location":"core_functions/design_system/components/#usage-guidelines","title":"Usage Guidelines","text":"<ul> <li>Use primary buttons for main actions (Edit, Save)</li> <li>Use secondary buttons for alternative actions</li> <li>Use text-only buttons for cancel actions</li> <li>Maintain adequate spacing between buttons</li> <li>Use clear, concise button labels</li> </ul>"},{"location":"core_functions/design_system/components/#accessibility-considerations","title":"Accessibility Considerations","text":"<ul> <li>All buttons have visible focus states</li> <li>Interactive elements use the no-hover-highlight class to remove tap highlights on mobile</li> <li>Buttons use semantic HTML button elements</li> </ul>"},{"location":"core_functions/design_system/components/#chips","title":"Chips","text":"<p>Chips are compact UI elements used to display items in a list, especially for rankings.</p>"},{"location":"core_functions/design_system/components/#visual-style_1","title":"Visual Style","text":"<ul> <li>Inline-flex display with centered alignment</li> <li>Padding: 0.25rem 0.75rem</li> <li>May include rank indicators</li> </ul> <pre><code>/* From styles.css */\n.chip { \n    display: inline-flex; \n    align-items: center; \n    padding: 0.25rem 0.75rem; \n}\n</code></pre>"},{"location":"core_functions/design_system/components/#variations-and-states_1","title":"Variations and States","text":"Variation Style Usage Standard Light background with dark text Default chip style Disabled Opacity 0.5, gray background Non-interactive chips With Rank Includes circular rank indicator with emoji Showing ranked items"},{"location":"core_functions/design_system/components/#usage-guidelines_1","title":"Usage Guidelines","text":"<ul> <li>Use chips primarily in the sidebar to display ranked items</li> <li>Include rank indicators to show position when relevant</li> <li>Keep chip content concise</li> </ul>"},{"location":"core_functions/design_system/components/#cards","title":"Cards","text":"<p>Cards are container elements used to display grouped information.</p>"},{"location":"core_functions/design_system/components/#visual-style_2","title":"Visual Style","text":"<ul> <li>White background</li> <li>Border radius: 0.5rem</li> <li>Light shadow</li> <li>Border: 1px solid #e5e7eb</li> <li>Padding: 0.75rem</li> </ul> <pre><code>/* From styles.css */\n.dashboard-grid-card { \n    background-color: white; \n    border-radius: 0.5rem; \n    padding: 0.75rem; \n    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); \n    border: 1px solid #e5e7eb; \n    text-align: center; \n    display: flex; \n    flex-direction: column; \n    justify-content: center; \n    min-height: 95px; \n    cursor: pointer; \n    position: relative; \n}\n</code></pre>"},{"location":"core_functions/design_system/components/#variations-and-states_2","title":"Variations and States","text":"Variation Style Usage Standard White background, light shadow Default card style Selected Highlighted state For selected items With Rank Includes rank indicator For ranked items With Stars Displays star ratings For rated items"},{"location":"core_functions/design_system/components/#usage-guidelines_2","title":"Usage Guidelines","text":"<ul> <li>Use cards in the dashboard grid to display items</li> <li>Include title, count, rank, and star ratings as needed</li> <li>Maintain consistent card sizing within a grid</li> </ul>"},{"location":"core_functions/design_system/components/#tabs","title":"Tabs","text":"<p>Tabs are navigation elements used to switch between content views.</p>"},{"location":"core_functions/design_system/components/#visual-style_3","title":"Visual Style","text":"<ul> <li>Horizontal arrangement with spacing between tabs</li> <li>Border-bottom for active state</li> </ul> <pre><code>/* From styles.css */\n.tab-button.active { \n    border-color: #3b82f6; \n    background-color: #eff6ff; \n    color: #2563eb; \n    font-weight: 600; \n}\n</code></pre>"},{"location":"core_functions/design_system/components/#variations-and-states_3","title":"Variations and States","text":"Variation Style Usage Active Blue border-bottom, blue text, light blue background Currently selected tab Inactive Gray text, no border Non-selected tabs"},{"location":"core_functions/design_system/components/#usage-guidelines_3","title":"Usage Guidelines","text":"<ul> <li>Use tabs for switching between different categories or views</li> <li>Clearly distinguish the active tab</li> <li>Keep tab labels short and descriptive</li> </ul>"},{"location":"core_functions/design_system/components/#modal","title":"Modal","text":"<p>Modals are overlay dialogs for focused interactions.</p>"},{"location":"core_functions/design_system/components/#visual-style_4","title":"Visual Style","text":"<ul> <li>White background</li> <li>Border radius: 0.5rem</li> <li>Box shadow for elevation</li> <li>Padding: 1.5rem</li> <li>Backdrop with blur effect</li> </ul> <pre><code>/* From styles.css */\n.modal-overlay { \n    position: fixed; \n    inset: 0; \n    background-color: rgba(0, 0, 0, 0.6); \n    display: flex; \n    align-items: center; \n    justify-content: center; \n    z-index: 50; \n    opacity: 0; \n    visibility: hidden; \n    backdrop-filter: blur(2px); \n}\n\n.modal { \n    background-color: white; \n    padding: 1.5rem; \n    border-radius: 0.5rem; \n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); \n    width: 90%; \n    max-width: 400px; \n    transform: scale(0.95); \n}\n</code></pre>"},{"location":"core_functions/design_system/components/#variations-and-states_4","title":"Variations and States","text":"Variation Style Usage Visible Fully opaque overlay, modal at scale 1 When modal is open Hidden Transparent overlay, modal at scale 0.95 When modal is closed"},{"location":"core_functions/design_system/components/#usage-guidelines_4","title":"Usage Guidelines","text":"<ul> <li>Use modals for confirmation dialogs (save confirmation)</li> <li>Include a title, message, and action buttons</li> <li>Provide a way to dismiss the modal (cancel button)</li> <li>Limit the use of modals to important interactions</li> </ul>"},{"location":"core_functions/design_system/components/#sidebar","title":"Sidebar","text":"<p>The sidebar is a side panel for detailed views and interactions.</p>"},{"location":"core_functions/design_system/components/#visual-style_5","title":"Visual Style","text":"<ul> <li>Fixed position on the right side</li> <li>Light gray background (#f9fafb)</li> <li>Box shadow for elevation</li> <li>Width: 85% (max 350px)</li> </ul> <pre><code>/* From styles.css */\n#view-sidebar { \n    position: fixed; \n    top: 0; \n    bottom: 0; \n    right: 0; \n    width: 85%; \n    max-width: 350px; \n    background-color: #f9fafb; \n    box-shadow: -2px 0 10px rgba(0,0,0,0.1); \n    z-index: 60; \n    transform: translateX(100%); \n    visibility: hidden; \n    display: flex; \n    flex-direction: column; \n}\n</code></pre>"},{"location":"core_functions/design_system/components/#variations-and-states_5","title":"Variations and States","text":"Variation Style Usage Visible Transformed to x:0 When sidebar is open Hidden Transformed to x:100% When sidebar is closed"},{"location":"core_functions/design_system/components/#usage-guidelines_5","title":"Usage Guidelines","text":"<ul> <li>Use the sidebar for detailed views of selected items</li> <li>Include tabs for different views (Rankings, Review &amp; Notes)</li> <li>Provide a close button to dismiss the sidebar</li> </ul>"},{"location":"core_functions/design_system/components/#star-rating","title":"Star Rating","text":"<p>The star rating component allows users to rate items.</p>"},{"location":"core_functions/design_system/components/#visual-style_6","title":"Visual Style","text":"<ul> <li>Yellow stars (#fbbf24)</li> <li>Interactive labels with radio inputs</li> </ul> <pre><code>/* From styles.css */\n.star-rating label {\n    transition: all 0.15s ease-in-out;\n}\n</code></pre>"},{"location":"core_functions/design_system/components/#variations-and-states_6","title":"Variations and States","text":"Variation Style Usage Selected Filled star Rated value Unselected Empty star Unrated value Hover Highlighted star Interactive feedback"},{"location":"core_functions/design_system/components/#usage-guidelines_6","title":"Usage Guidelines","text":"<ul> <li>Use for rating items from 1-5 stars</li> <li>Include descriptive text for each star rating</li> <li>Provide visual feedback on hover and selection</li> </ul>"},{"location":"core_functions/design_system/foundations/","title":"Design Foundations","text":"<p>The foundational elements of the Music Besties design system define the basic visual language of the application. These elements include colors, typography, spacing, and effects.</p>"},{"location":"core_functions/design_system/foundations/#colors","title":"Colors","text":"<p>The color palette is designed to be clean, accessible, and aligned with the application's focus on music ranking.</p>"},{"location":"core_functions/design_system/foundations/#primary-colors","title":"Primary Colors","text":"Token Name Value Usage <code>--color-bg-main</code> #f3f4f6 Main background color <code>--color-bg-white</code> #ffffff Card and content background <code>--color-text-main</code> #1f2937 Primary text color <code>--color-blue-primary</code> #3b82f6 Primary action buttons, focus states <code>--color-blue-dark</code> #2563eb Active tabs, selected states <code>--color-blue-light</code> #eff6ff Active tab background"},{"location":"core_functions/design_system/foundations/#secondary-colors","title":"Secondary Colors","text":"Token Name Value Usage <code>--color-text-secondary</code> #6b7280 Secondary text, counts, descriptions <code>--color-text-light</code> #9ca3af Lighter text, disabled states <code>--color-red</code> #dc2626 Cancel buttons, destructive actions <code>--color-green</code> #10b981 Save/confirm buttons, success states <code>--color-yellow</code> #fbbf24 Star ratings"},{"location":"core_functions/design_system/foundations/#neutral-colors","title":"Neutral Colors","text":"Token Name Value Usage <code>--color-gray-border</code> #e5e7eb Borders, dividers <code>--color-gray-light</code> #f9fafb Light backgrounds (sidebar)"},{"location":"core_functions/design_system/foundations/#era-specific-colors","title":"Era-Specific Colors","text":"<p>Each music era in the application has an associated emoji that serves as a visual identifier:</p> <pre><code>// From data.js\nconst eraEmojis = {\n    'debut': '\ud83d\udc9a',\n    'fearless': '\ud83d\udc9b',\n    'speaknow': '\ud83d\udc9c',\n    'red': '\u2764\ufe0f',\n    '1989': '\ud83e\ude75',\n    'reputation': '\ud83d\udda4',\n    'lover': '\ud83e\ude77',\n    'folklore': '\ud83e\ude76',\n    'evermore': '\ud83e\udde1',\n    'midnights': '\ud83d\udc99',\n    'ttpd': '\ud83e\udd0d',\n    'eras': '\u2728'\n};\n</code></pre>"},{"location":"core_functions/design_system/foundations/#typography","title":"Typography","text":"<p>The application uses a clean, modern typography system based on the Inter font family.</p>"},{"location":"core_functions/design_system/foundations/#font-family","title":"Font Family","text":"Token Name Value Usage <code>--font-family-base</code> 'Inter', sans-serif Default app font"},{"location":"core_functions/design_system/foundations/#font-sizes","title":"Font Sizes","text":"Token Name Value Usage <code>--font-size-xs</code> 0.75rem Small text, counts, metadata <code>--font-size-sm</code> 0.875rem Card titles, secondary text <code>--font-size-base</code> 1rem Body text <code>--font-size-lg</code> 1.125rem Sidebar titles <code>--font-size-xl</code> 1.25rem Section headings <code>--font-size-2xl</code> 1.5rem Page titles"},{"location":"core_functions/design_system/foundations/#font-weights","title":"Font Weights","text":"Token Name Value Usage <code>--font-weight-normal</code> 400 Regular text <code>--font-weight-medium</code> 500 Emphasized text <code>--font-weight-semibold</code> 600 Headings, buttons <code>--font-weight-bold</code> 700 Strong emphasis, main headings"},{"location":"core_functions/design_system/foundations/#line-heights","title":"Line Heights","text":"Token Name Value Usage <code>--line-height-tight</code> 1.25 Headings <code>--line-height-base</code> 1.5 Body text"},{"location":"core_functions/design_system/foundations/#spacing","title":"Spacing","text":"<p>Consistent spacing helps create visual rhythm and hierarchy in the interface.</p> Token Name Value Usage <code>--spacing-1</code> 0.25rem Tiny spacing, icon padding <code>--spacing-2</code> 0.5rem Small spacing, tight elements <code>--spacing-3</code> 0.75rem Card padding <code>--spacing-4</code> 1rem Standard spacing, component separation <code>--spacing-6</code> 1.5rem Section spacing, modal padding <code>--spacing-8</code> 2rem Large spacing between major sections"},{"location":"core_functions/design_system/foundations/#effects","title":"Effects","text":"<p>Effects add depth and interactivity to the interface.</p>"},{"location":"core_functions/design_system/foundations/#visual-assets","title":"Visual Assets","text":"<p>The application uses emoji characters as visual identifiers for albums. These emoji characters are used consistently throughout the application to provide visual recognition of albums without requiring image assets.</p> <p>Figure: Album Emoji Reference</p> <pre><code>+----------------------------------+\n| Album Emoji Reference            |\n+----------------------------------+\n| taylor-swift: \ud83e\udd20                 |\n| fearless: \ud83d\udc9b                     |\n| speak-now: \ud83d\udc9c                    |\n| red: \u2764\ufe0f                          |\n| 1989: \ud83c\udf0a                         |\n| reputation: \ud83d\udc0d                   |\n| lover: \ud83d\udc96                        |\n| folklore: \ud83c\udf32                     |\n| evermore: \ud83c\udf42                     |\n| midnights: \u2728                    |\n| ttpd: \ud83e\udd0d                         |\n+----------------------------------+\n</code></pre> <p>Comprehensive mapping between album identifiers and their corresponding emoji characters for visual representation. Maintains visual consistency across the application by standardizing the emoji usage for each album.</p>"},{"location":"core_functions/design_system/foundations/#shadows","title":"Shadows","text":"Token Name Value Usage <code>--shadow-sm</code> 0 1px 2px 0 rgba(0,0,0,0.05) Card shadows <code>--shadow-md</code> 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06) Elevated components <code>--shadow-lg</code> 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05) Modals, popovers"},{"location":"core_functions/design_system/foundations/#border-radius","title":"Border Radius","text":"Token Name Value Usage <code>--radius-sm</code> 0.25rem Small border radius <code>--radius-md</code> 0.375rem Medium border radius <code>--radius-lg</code> 0.5rem Large border radius (cards, modals) <code>--radius-full</code> 9999px Pill shapes, rank indicators"},{"location":"core_functions/design_system/foundations/#transitions","title":"Transitions","text":"Token Name Value Usage <code>--transition-fast</code> 0.15s ease-in-out All UI transitions"},{"location":"core_functions/design_system/foundations/#iconography","title":"Iconography","text":"<p>The application primarily uses emoji as icons, with each music era having its own associated emoji.</p> <pre><code>/* From styles.css */\n.chip .chip-rank-indicator { \n    margin-right: 0.5rem; \n}\n.chip-rank-indicator .emoji { \n    margin-right: 0.15rem; \n    font-size: 0.65rem; \n    line-height: 1; \n}\n</code></pre> <p>The app also uses a text-based close button (\u00d7) for the sidebar.</p>"},{"location":"core_functions/design_system/patterns/","title":"Layout Patterns","text":"<p>This section documents the common layout patterns used in the Music Besties application. These patterns define how components are arranged and how the application structure is organized.</p>"},{"location":"core_functions/design_system/patterns/#grid-system","title":"Grid System","text":"<p>The application uses a responsive grid system based on Tailwind CSS.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;div id=\"dashboard-grid\" class=\"grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4 mb-6\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"core_functions/design_system/patterns/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Dashboard grid uses 2 columns on mobile, 3 columns on larger screens</li> <li>Gap spacing of 0.75rem (mobile) to 1rem (desktop)</li> <li>Responsive breakpoints follow Tailwind's default system</li> </ul>"},{"location":"core_functions/design_system/patterns/#common-layout-structures","title":"Common Layout Structures","text":""},{"location":"core_functions/design_system/patterns/#app-container","title":"App Container","text":"<p>The main application container provides a consistent frame for the application content.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;div class=\"max-w-xl mx-auto bg-white min-h-screen shadow-lg relative overflow-hidden\"&gt;\n</code></pre> <ul> <li>Maximum width of 36rem (max-w-xl)</li> <li>Centered with auto margins</li> <li>White background</li> <li>Full minimum height of the viewport</li> <li>Shadow for elevation</li> <li>Relative positioning for absolute children</li> </ul>"},{"location":"core_functions/design_system/patterns/#screen-layout","title":"Screen Layout","text":"<p>Each screen in the application follows a consistent layout pattern.</p> <pre><code>&lt;!-- From index.html - Dashboard Screen --&gt;\n&lt;div id=\"screen-dashboard\" v-show=\"currentScreen === 'dashboard'\" class=\"p-4 sm:p-6\"&gt;\n    &lt;div class=\"flex justify-between items-center mb-6\"&gt;\n        &lt;h1 class=\"text-2xl font-bold text-gray-800\"&gt;My Rankings&lt;/h1&gt;\n        &lt;button id=\"edit-rankings-btn\" @click=\"showScreen('edit')\" class=\"bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow active:bg-blue-700 transition-colors text-sm no-hover-highlight\"&gt;\n            Edit\n        &lt;/button&gt;\n    &lt;/div&gt;\n    &lt;!-- Content --&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>Padding: 1rem (p-4) on mobile, 1.5rem (p-6) on desktop</li> <li>Header with title and action button</li> <li>Content area below header</li> </ul>"},{"location":"core_functions/design_system/patterns/#header-layout","title":"Header Layout","text":"<p>Headers use a consistent layout pattern across the application.</p> <pre><code>&lt;!-- From index.html - Edit Screen Header --&gt;\n&lt;div class=\"flex justify-between items-center p-4 border-b border-gray-200 bg-white sticky top-0 z-10\"&gt;\n    &lt;button id=\"cancel-edit-btn\" @click=\"showScreen('dashboard')\" class=\"text-red-600 font-medium px-3 py-1 rounded active:bg-red-100 transition-colors no-hover-highlight\"&gt;Cancel&lt;/button&gt;\n    &lt;h2 class=\"text-lg font-semibold text-gray-700\"&gt;Edit Rankings&lt;/h2&gt;\n    &lt;button id=\"save-edit-btn\" @click=\"showSaveConfirmModal\" class=\"bg-green-500 text-white font-semibold px-4 py-1 rounded-md shadow active:bg-green-700 transition-colors no-hover-highlight\"&gt;Save&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>Flex layout with space-between for title and action buttons</li> <li>Centered alignment of items</li> <li>Border bottom for visual separation</li> <li>Sticky positioning for scrolling content</li> </ul>"},{"location":"core_functions/design_system/patterns/#tab-layout","title":"Tab Layout","text":"<p>The tab layout pattern is used for switching between related content.</p> <pre><code>&lt;!-- From index.html - Tab Layout --&gt;\n&lt;div class=\"border-b border-gray-200 bg-white overflow-x-auto sticky top-[61px] z-10\"&gt;\n    &lt;nav id=\"tab-buttons\" class=\"-mb-px flex space-x-1 sm:space-x-2 px-4\" aria-label=\"Tabs\"&gt;&lt;/nav&gt;\n&lt;/div&gt;\n&lt;div id=\"tab-panels\" class=\"flex-grow overflow-y-auto p-4 sm:p-6\"&gt;&lt;/div&gt;\n</code></pre> <ul> <li>Horizontal scrolling tabs with panels below</li> <li>Sticky positioning for tab navigation</li> <li>Overflow handling for scrollable content</li> <li>Consistent spacing between tabs</li> </ul>"},{"location":"core_functions/design_system/patterns/#sidebar-layout","title":"Sidebar Layout","text":"<p>The sidebar layout pattern is used for detailed views and interactions.</p> <pre><code>&lt;!-- From index.html - Sidebar Layout --&gt;\n&lt;div id=\"view-sidebar\" :class=\"{'visible': isSidebarVisible}\"&gt;\n    &lt;div class=\"sidebar-header\"&gt;\n        &lt;div class=\"sidebar-header-top-row\"&gt;\n            &lt;div id=\"sidebar-title-container\" class=\"sidebar-title-container\"&gt;&lt;/div&gt;\n            &lt;button id=\"sidebar-close-btn\" @click=\"closeSidebar\" class=\"sidebar-close-btn no-hover-highlight active:bg-gray-200\" aria-label=\"Close sidebar\"&gt;&amp;times;&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"sidebar-content\" class=\"sidebar-content\"&gt;\n        &lt;div id=\"sidebar-tab-nav\" class=\"sidebar-tab-nav\"&gt;\n            &lt;!-- Tab buttons --&gt;\n        &lt;/div&gt;\n        &lt;div id=\"sidebar-tab-panels\" class=\"flex-grow relative\"&gt;\n            &lt;!-- Tab panels --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>Fixed position panel with header and scrollable content</li> <li>Header with title and close button</li> <li>Tab navigation for different views</li> <li>Scrollable content area</li> </ul>"},{"location":"core_functions/design_system/patterns/#spacing-application","title":"Spacing Application","text":"<p>The application uses consistent spacing to create visual hierarchy and rhythm.</p>"},{"location":"core_functions/design_system/patterns/#margins-between-sections","title":"Margins Between Sections","text":"<pre><code>&lt;!-- From index.html --&gt;\n&lt;div class=\"flex justify-between items-center mb-6\"&gt;\n</code></pre> <ul> <li>Margins between sections: 1.5rem (mb-6)</li> <li>Consistent bottom margins for separation between content blocks</li> </ul>"},{"location":"core_functions/design_system/patterns/#padding-for-containers","title":"Padding for Containers","text":"<pre><code>&lt;!-- From index.html --&gt;\n&lt;div id=\"screen-dashboard\" v-show=\"currentScreen === 'dashboard'\" class=\"p-4 sm:p-6\"&gt;\n</code></pre> <ul> <li>Padding for containers: 1rem (p-4) on mobile, 1.5rem (p-6) on desktop</li> <li>Consistent padding across different screen sizes</li> </ul>"},{"location":"core_functions/design_system/patterns/#gap-between-grid-items","title":"Gap Between Grid Items","text":"<pre><code>&lt;!-- From index.html --&gt;\n&lt;div id=\"dashboard-grid\" class=\"grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4 mb-6\"&gt;&lt;/div&gt;\n</code></pre> <ul> <li>Gap between grid items: 0.75rem (gap-3) on mobile, 1rem (gap-4) on desktop</li> <li>Responsive gap sizing for different screen sizes</li> </ul>"},{"location":"core_functions/design_system/patterns/#component-composition","title":"Component Composition","text":""},{"location":"core_functions/design_system/patterns/#cards-in-grid","title":"Cards in Grid","text":"<pre><code>&lt;!-- Dashboard grid with cards --&gt;\n&lt;div id=\"dashboard-grid\" class=\"grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4 mb-6\"&gt;&lt;/div&gt;\n</code></pre> <ul> <li>Cards are arranged in a responsive grid</li> <li>Each card has consistent sizing and spacing</li> <li>Grid adapts to different screen sizes</li> </ul>"},{"location":"core_functions/design_system/patterns/#tabs-with-panels","title":"Tabs with Panels","text":"<pre><code>&lt;!-- Tab system --&gt;\n&lt;div class=\"border-b border-gray-200 bg-white overflow-x-auto sticky top-[61px] z-10\"&gt;\n    &lt;nav id=\"tab-buttons\" class=\"-mb-px flex space-x-1 sm:space-x-2 px-4\" aria-label=\"Tabs\"&gt;&lt;/nav&gt;\n&lt;/div&gt;\n&lt;div id=\"tab-panels\" class=\"flex-grow overflow-y-auto p-4 sm:p-6\"&gt;&lt;/div&gt;\n</code></pre> <ul> <li>Tab buttons are linked to corresponding panels</li> <li>Only one panel is visible at a time</li> <li>Tabs are horizontally scrollable on smaller screens</li> </ul>"},{"location":"core_functions/design_system/patterns/#modal-composition","title":"Modal Composition","text":"<pre><code>&lt;!-- Modal structure --&gt;\n&lt;div id=\"save-confirm-modal\" class=\"modal-overlay\" :class=\"{'visible': isSaveModalVisible}\"&gt;\n    &lt;div class=\"modal\"&gt;\n        &lt;h3 class=\"text-lg font-semibold mb-4 text-gray-800\"&gt;Confirm Save&lt;/h3&gt;\n        &lt;p class=\"text-gray-600 mb-6\"&gt;Are you sure you want to save these rankings?&lt;/p&gt;\n        &lt;div class=\"flex justify-end space-x-3\"&gt;\n            &lt;button id=\"cancel-save-modal-btn\" @click=\"hideSaveConfirmModal\" class=\"px-4 py-2 rounded-md text-gray-700 bg-gray-100 active:bg-gray-300 transition-colors no-hover-highlight\"&gt;Cancel&lt;/button&gt;\n            &lt;button id=\"confirm-save-modal-btn\" @click=\"saveAndExit\" class=\"px-4 py-2 rounded-md bg-green-500 text-white active:bg-green-700 transition-colors shadow no-hover-highlight\"&gt;Confirm Save&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li>Modal overlay with centered modal dialog</li> <li>Modal includes title, message, and action buttons</li> <li>Buttons are aligned to the right with consistent spacing</li> </ul>"},{"location":"core_functions/design_system/responsive/","title":"Responsive Design Principles","text":"<p>This section documents how the Music Besties application adapts to different screen sizes and devices. The responsive design ensures a consistent user experience across various devices.</p>"},{"location":"core_functions/design_system/responsive/#breakpoints","title":"Breakpoints","text":"<p>The application uses Tailwind CSS breakpoints to define responsive behavior.</p> Breakpoint Name Width (px) Target Devices Default 0-639 Mobile phones sm 640+ Larger phones, small tablets <pre><code>&lt;!-- From index.html --&gt;\n&lt;div id=\"dashboard-grid\" class=\"grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4 mb-6\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"core_functions/design_system/responsive/#component-adaptations","title":"Component Adaptations","text":""},{"location":"core_functions/design_system/responsive/#dashboard-grid","title":"Dashboard Grid","text":"<p>The dashboard grid adapts to different screen sizes by changing the number of columns.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;div id=\"dashboard-grid\" class=\"grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4 mb-6\"&gt;&lt;/div&gt;\n</code></pre> <ul> <li>2 columns on mobile devices (default)</li> <li>3 columns on larger screens (sm breakpoint and above)</li> <li>Gap spacing increases from 0.75rem to 1rem on larger screens</li> </ul>"},{"location":"core_functions/design_system/responsive/#container-padding","title":"Container Padding","text":"<p>Container padding increases on larger screens to provide more breathing room.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;div id=\"screen-dashboard\" v-show=\"currentScreen === 'dashboard'\" class=\"p-4 sm:p-6\"&gt;\n</code></pre> <ul> <li>1rem padding (p-4) on mobile devices</li> <li>1.5rem padding (p-6) on larger screens</li> </ul>"},{"location":"core_functions/design_system/responsive/#sidebar-width","title":"Sidebar Width","text":"<p>The sidebar has a responsive width that adapts to the screen size.</p> <pre><code>/* From styles.css */\n#view-sidebar { \n    width: 85%; \n    max-width: 350px; \n}\n</code></pre> <ul> <li>85% width on smaller screens</li> <li>Maximum width of 350px on larger screens</li> </ul>"},{"location":"core_functions/design_system/responsive/#tab-spacing","title":"Tab Spacing","text":"<p>The spacing between tabs increases on larger screens.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;nav id=\"tab-buttons\" class=\"-mb-px flex space-x-1 sm:space-x-2 px-4\" aria-label=\"Tabs\"&gt;&lt;/nav&gt;\n</code></pre> <ul> <li>0.25rem spacing (space-x-1) on mobile devices</li> <li>0.5rem spacing (space-x-2) on larger screens</li> </ul>"},{"location":"core_functions/design_system/responsive/#layout-shifts","title":"Layout Shifts","text":"<p>The application handles layout shifts between breakpoints in a way that maintains usability and visual consistency.</p>"},{"location":"core_functions/design_system/responsive/#consistent-component-sizing","title":"Consistent Component Sizing","text":"<p>Components maintain consistent sizing relative to their containers across breakpoints.</p> <pre><code>/* From styles.css */\n.dashboard-grid-card { \n    min-height: 95px; \n}\n</code></pre> <ul> <li>Fixed minimum height ensures consistent card sizing</li> <li>Percentage-based widths adapt to container size</li> </ul>"},{"location":"core_functions/design_system/responsive/#overflow-handling","title":"Overflow Handling","text":"<p>The application handles overflow appropriately to prevent content from breaking the layout.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;div class=\"border-b border-gray-200 bg-white overflow-x-auto sticky top-[61px] z-10\"&gt;\n</code></pre> <ul> <li>Horizontal scrolling for tab navigation on smaller screens</li> <li>Text truncation for long content</li> </ul>"},{"location":"core_functions/design_system/responsive/#touch-targets","title":"Touch Targets","text":"<p>The application ensures that interactive elements are large enough for touch interaction.</p> <pre><code>/* From styles.css */\n.dashboard-grid-card { \n    min-height: 95px; \n    cursor: pointer; \n}\n</code></pre> <ul> <li>Cards have adequate size for touch interaction</li> <li>Buttons have appropriate padding for touch targets</li> <li>The no-hover-highlight class removes default tap highlights on mobile</li> </ul> <pre><code>/* From styles.css */\n.no-hover-highlight { \n    -webkit-tap-highlight-color: transparent; \n}\n</code></pre>"},{"location":"core_functions/design_system/responsive/#viewport-settings","title":"Viewport Settings","text":"<p>The application uses appropriate viewport settings to ensure proper rendering on mobile devices.</p> <pre><code>&lt;!-- From index.html --&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</code></pre> <ul> <li>Width set to device width</li> <li>Initial scale set to 1.0</li> <li>No user-scalable restrictions</li> </ul>"},{"location":"core_functions/design_system/responsive/#testing-approach","title":"Testing Approach","text":"<p>When testing responsive behavior, consider the following:</p> <ul> <li>Test on actual devices when possible, not just browser resizing</li> <li>Test both portrait and landscape orientations</li> <li>Verify that touch interactions work as expected</li> <li>Check that text remains readable at all screen sizes</li> <li>Ensure that no content is cut off or inaccessible</li> <li>Verify that the application performs well on lower-end devices</li> </ul>"},{"location":"current_state/components/","title":"Component Details","text":"<p>This section provides detailed specifications for the key components in the Music Besties application.</p>"},{"location":"current_state/components/#component-hierarchy","title":"Component Hierarchy","text":"<p>The application is structured around these key components, which are implemented in Vue.js:</p> <p>Figure: Component Hierarchy</p> <pre><code>flowchart TD\n    App[\"App.vue\\n(Root component)\"] --&gt; Dashboard[\"DashboardView.vue\\n(Main entry point)\"];\n    App --&gt; EditRankings[\"EditRankingsView.vue\\n(Selection interface)\"];\n    App --&gt; Sidebar[\"SidebarPanel.vue\\n(Rankings &amp; Reviews)\"];\n    App --&gt; Navigation[\"NavigationSystem.vue\\n(Global navigation)\"];\n\n    Dashboard --&gt; EraCard[\"EraCard.vue\\n(Multiple instances in grid)\"];\n\n    EditRankings --&gt; SelectionTabs[\"SelectionTabs.vue\\n(Tab navigation)\"];\n    EditRankings --&gt; ItemChips[\"ItemChip.vue\\n(Selectable items)\"];\n\n    Sidebar --&gt; RankingsList[\"RankingsList.vue\\n(Ordered list)\"];\n    Sidebar --&gt; ReviewForm[\"ReviewForm.vue\\n(Rating &amp; comments)\"];\n\n    Navigation --&gt; NavMenu[\"NavMenu.vue\\n(Menu items)\"];\n    Navigation --&gt; AboutView[\"AboutView.vue\"];\n    Navigation --&gt; ProfileView[\"ProfileView.vue\"];\n    Navigation --&gt; SettingsView[\"SettingsView.vue\"];\n    Navigation --&gt; TermsView[\"TermsView.vue\"];\n\n    %% Add styling for component types\n    classDef root fill:#f96,stroke:#333,stroke-width:4px;\n    classDef primaryViews fill:#9cf,stroke:#333,stroke-width:2px;\n    classDef supportingViews fill:#cfc,stroke:#333,stroke-width:1px;\n    classDef navSystem fill:#dfd,stroke:#333,stroke-width:1px;\n\n    %% Apply classes to nodes\n    class App root;\n    class Dashboard,EditRankings,Sidebar primaryViews;\n    class EraCard,SelectionTabs,ItemChips,RankingsList,ReviewForm supportingViews;\n    class Navigation,NavMenu,AboutView,ProfileView,SettingsView,TermsView navSystem;</code></pre> <p>Tree diagram showing the Vue.js component hierarchy from App.vue down to individual UI elements. This updated diagram reflects the complete application structure including the navigation system and supporting views.</p>"},{"location":"current_state/components/#primary-components","title":"Primary Components","text":"<ul> <li>App.vue: The root component that manages routing and global state</li> <li>DashboardView.vue: Main entry point displaying the Era Cards grid</li> <li>EditRankingsView.vue: Interface for selecting and ranking items</li> <li>SidebarPanel.vue: Context-sensitive panel for viewing rankings and managing reviews</li> <li>NavigationSystem.vue: Global navigation system accessible from all views</li> </ul>"},{"location":"current_state/components/#supporting-components","title":"Supporting Components","text":"<ul> <li>EraCard.vue: Reusable component for era display on the dashboard</li> <li>SelectionTabs.vue: Tab navigation for different ranking categories</li> <li>ItemChip.vue: Interactive component for selection functionality</li> <li>RankingsList.vue: Component for displaying ordered rankings</li> <li>ReviewForm.vue: Form component for ratings and comments</li> </ul>"},{"location":"current_state/components/#navigation-components","title":"Navigation Components","text":"<ul> <li>NavMenu.vue: Menu component with navigation links</li> <li>AboutView.vue: View component for application information</li> <li>ProfileView.vue: View component for user profile</li> <li>SettingsView.vue: View component for user settings</li> <li>TermsView.vue: View component for legal information</li> </ul>"},{"location":"current_state/components/#component-dashboardcard","title":"Component: DashboardCard","text":"Property Type Required Description <code>tabId</code> <code>string</code> Yes Album identifier <code>title</code> <code>string</code> Yes Album title to display <code>emoji</code> <code>string</code> No Emoji character for album <code>rating</code> <code>number</code> (0-5) No User's rating (whole numbers) <code>selectedCount</code> <code>number</code> No Number of selected songs <code>totalCount</code> <code>number</code> Yes Total number of songs <p>Events:</p> Event Payload Description <code>@open-sidebar</code> <code>tabId: string</code> Emitted when card is clicked <p>CSS Classes:</p> <ul> <li><code>dashboard-grid-card</code></li> <li><code>dashboard-stars</code> <pre><code>## Album Sidebar Panel\n\n### Panel Structure and Functionality\n\nThe Album Sidebar Panel is a sliding panel that provides detailed information about a selected album. It includes the following features:\n\n- Album title and emoji\n- List of songs\n- Rating and review information\n- Navigation to other albums\n\n### Album Example\n\nThe sidebar panel displays album information in a structured format, with clear sections for songs, ratings, and reviews.\n\n**Figure: Album Sidebar Panel Layout**\n\n```ascii\n+-----------------------------------------------------+\n|  \u2190 Red \u2764\ufe0f                                          |\n+-----------------------------------------------------+\n|                                                     |\n| Songs:                                              |\n|                                                     |\n| Ranked:                                             |\n| 1. All Too Well                                     |\n| 2. State of Grace                                   |\n| 3. 22                                               |\n|                                                     |\n| Unranked:                                           |\n| \u2022 Red                                               |\n| \u2022 I Knew You Were Trouble                           |\n| \u2022 We Are Never Ever Getting Back Together           |\n| \u2022 Begin Again                                       |\n| \u2022 Holy Ground                                       |\n| \u2022 The Last Time                                     |\n| \u2022 I Almost Do                                       |\n|                                                     |\n| Your Review:                                        |\n| \u2605\u2605\u2605\u2605\u2605                                              |\n| \"This album perfectly captures the emotions of      |\n| heartbreak and moving on. All Too Well is an        |\n| absolute masterpiece.\"                              |\n|                                                     |\n| Last updated: May 5, 2025                           |\n|                                                     |\n+-----------------------------------------------------+\n</code></pre></li> </ul> <p>Detailed panel structure showing the song ranking interface with numbered positions and the scrollable unranked songs section. Demonstrates how the component handles varying amounts of content through scrolling while maintaining a consistent visual structure.</p>"},{"location":"current_state/components/#review-panel","title":"Review Panel","text":"<p>The Review Panel allows users to add and edit reviews for albums. It includes:</p> <ul> <li>Star rating system (0-5 stars)</li> <li>Text input for comments</li> <li>Save and cancel buttons</li> <li>Timestamp information for when the review was last updated</li> </ul> <p>Figure: Review Panel Layout</p> <pre><code>+-----------------------------------------------------+\n|  Edit Review: Red \u2764\ufe0f                               |\n+-----------------------------------------------------+\n|                                                     |\n| Rating:                                             |\n|                                                     |\n| \u2605\u2605\u2605\u2605\u2605                                              |\n| \u2606\u2606\u2606\u2606\u2606                                              |\n|                                                     |\n| Comments:                                           |\n|                                                     |\n| +---------------------------------------------------+\n| | This album perfectly captures the emotions of     |\n| | heartbreak and moving on. All Too Well is an      |\n| | absolute masterpiece.                             |\n| |                                                   |\n| |                                                   |\n| +---------------------------------------------------+\n|                                                     |\n| Last updated: May 5, 2025                           |\n|                                                     |\n| [Save]                [Cancel]                      |\n|                                                     |\n+-----------------------------------------------------+\n</code></pre> <p>Comprehensive view of the star rating system and comment field with timestamp display for album reviews. Shows the expected input mechanisms and data display for the review creation and viewing process.</p>"},{"location":"current_state/data_handling/","title":"Data management","text":"<p>This section details the technical implementation of the Music Besties application.</p>"},{"location":"current_state/data_handling/#overview","title":"Overview","text":"<p>Music Besties uses a structured data model to organize music era and song information. The application implements a unidirectional data flow pattern with two primary types of data:</p> <ol> <li>Static Era Data: Pre-defined information about music eras including identifiers, titles, and song lists</li> <li>User Preference Data: User-generated content including selections, rankings, ratings, and reviews</li> </ol> <p>The data structure is designed to be lightweight and efficient, with a clear separation between core era data and user-specific preferences. This separation allows the application to reset user data without affecting the underlying era information if needed.</p> <p>All data is stored locally in the browser's LocalStorage, structured as JSON objects for easy serialization and retrieval. The application uses a reactive state management approach to ensure that UI components automatically update when the underlying data changes.</p> <p>Figure: Data Structure Model</p> <pre><code>classDiagram\n    class AlbumObject {\n        &lt;&lt;Core Data&gt;&gt;\n        String id\n        String name\n        String emoji\n        Array~String~ songs\n        +getSongCount() int\n        +getFormattedTitle() String\n    }\n\n    class UserSelections {\n        &lt;&lt;User Preferences&gt;&gt;\n        String albumId\n        Array~String~ selectedSongs\n        Array~String~ rankOrder\n        +addToRanking(songId) void\n        +removeFromRanking(songId) void\n        +moveInRanking(songId, newPosition) void\n    }\n\n    class UserReviews {\n        &lt;&lt;User Content&gt;&gt;\n        String albumId\n        Number rating\n        String comment\n        DateTime timestamp\n        +updateRating(newRating) void\n        +updateComment(newComment) void\n    }\n\n    AlbumObject \"1\" --o \"0..1\" UserSelections : references &gt;\n    AlbumObject \"1\" --o \"0..1\" UserReviews : references &gt;</code></pre> <p>Conceptual diagram showing the relationships and composition of album objects, user selections, and review data. Provides developers with an understanding of the data architecture to properly implement state management.</p>"},{"location":"current_state/data_handling/#state-structure","title":"State Structure","text":"<p>The application's state is stored in LocalStorage with this structure:</p> <p>Figure: LocalStorage Data Structure</p> <pre><code>erDiagram\n    LOCALSTORAGE ||--o{ ALBUM_DATA : stores\n\n    LOCALSTORAGE {\n        string key \"music-besties-data\"\n        object value\n    }\n\n    ALBUM_DATA {\n        object selectedSongs\n        object rankings\n        object reviews\n    }\n\n    ALBUM_DATA ||--o{ SELECTED_SONGS : contains\n    ALBUM_DATA ||--o{ RANKINGS : contains\n    ALBUM_DATA ||--o{ REVIEWS : contains\n\n    SELECTED_SONGS {\n        string albumId\n        array songList\n    }\n\n    RANKINGS {\n        string categoryId\n        array orderedItems\n    }\n\n    REVIEWS {\n        string albumId\n        number rating\n        string comment\n        datetime timestamp\n    }</code></pre> <p>Exact JSON structure showing the format of stored data including selectedSongs, rankings, and reviews with their nested properties. Ensures consistent data persistence implementation with the correct property names and data types.</p> <p>This structure is accessed via the key 'music-besties-data' in the browser's LocalStorage. The application loads this data on startup and updates it when changes are made to rankings or reviews.</p>"},{"location":"current_state/data_handling/#storage-mechanisms","title":"Storage Mechanisms","text":""},{"location":"current_state/data_handling/#localstorage","title":"LocalStorage","text":"<p>The application uses the browser's LocalStorage API to persist user data between sessions. This approach has the following advantages:</p> <ul> <li>No server-side storage requirements</li> <li>Data remains available even when offline</li> <li>Simple API for storing and retrieving JSON data</li> </ul> <p>However, it also has limitations:</p> <ul> <li>Limited storage capacity (typically 5-10MB)</li> <li>Data is specific to a browser and device</li> <li>No synchronization between devices</li> </ul>"},{"location":"current_state/data_handling/#in-memory-state","title":"In-memory State","text":"<p>During runtime, the application maintains an in-memory state that is synchronized with LocalStorage. This approach provides:</p> <ul> <li>Fast access to data during user interactions</li> <li>Ability to make temporary changes before persisting</li> <li>Simplified state management through Vue.js reactivity</li> </ul>"},{"location":"current_state/developer_debugger/","title":"Developer Debugger","text":"<p>This section provides breakdown of the technical details of each screen in the app </p>"},{"location":"current_state/developer_debugger/#dashboard-view","title":"Dashboard View","text":""},{"location":"current_state/developer_debugger/#component-structure","title":"Component Structure","text":"<pre><code>App.vue\n\u2514\u2500\u2500 DashboardView.vue\n    \u251c\u2500\u2500 HeaderBar.vue\n    \u251c\u2500\u2500 EraCard.vue (multiple instances in grid)\n    \u251c\u2500\u2500 SidebarPanel.vue (conditionally rendered)\n    \u2514\u2500\u2500 LeftSidebarNavigation.vue (conditionally rendered)\n</code></pre>"},{"location":"current_state/developer_debugger/#state-dependencies","title":"State Dependencies","text":"Component State Dependencies Events Emitted DashboardView <code>eras</code>, <code>userSelections</code> None HeaderBar <code>currentView</code> <code>open-navigation</code>, <code>edit-mode</code> EraCard <code>era</code>, <code>userSelections[era.id]</code> <code>open-sidebar</code> SidebarPanel <code>selectedEra</code>, <code>userSelections[selectedEra.id]</code> <code>close</code>, <code>switch-tab</code>, <code>edit-review</code> LeftSidebarNavigation <code>currentView</code> <code>navigate</code>, <code>close</code>"},{"location":"current_state/developer_debugger/#common-issues","title":"Common Issues","text":"<ul> <li>Era cards not rendering: Check that the <code>eras</code> array is properly loaded</li> <li>Star ratings not displaying: Verify <code>userSelections</code> object has the correct structure</li> <li>Sidebar not opening: Ensure <code>open-sidebar</code> event is being emitted with the correct era ID</li> <li>Navigation not working: Check that event handlers for navigation events are properly connected</li> </ul>"},{"location":"current_state/developer_debugger/#edit-rankings-view","title":"Edit Rankings View","text":""},{"location":"current_state/developer_debugger/#component-structure_1","title":"Component Structure","text":"<pre><code>App.vue\n\u2514\u2500\u2500 EditRankingsView.vue\n    \u251c\u2500\u2500 HeaderControls.vue\n    \u251c\u2500\u2500 SelectionTabs.vue\n    \u2502   \u2514\u2500\u2500 TabContent.vue (multiple instances)\n    \u251c\u2500\u2500 ItemChip.vue (multiple instances)\n    \u2514\u2500\u2500 SelectionCounter.vue\n</code></pre>"},{"location":"current_state/developer_debugger/#state-dependencies_1","title":"State Dependencies","text":"Component State Dependencies Events Emitted EditRankingsView <code>selectedEra</code>, <code>userSelections</code> None HeaderControls <code>hasChanges</code> <code>save</code>, <code>cancel</code> SelectionTabs <code>tabs</code>, <code>activeTab</code> <code>tab-change</code> ItemChip <code>item</code>, <code>isSelected</code>, <code>selectionIndex</code> <code>toggle-selection</code> SelectionCounter <code>selectedCount</code>, <code>totalCount</code> None"},{"location":"current_state/developer_debugger/#common-issues_1","title":"Common Issues","text":"<ul> <li>Drag and drop not working: Check browser console for errors in event handlers</li> <li>Rankings not saving: Verify state updates are being committed to localStorage</li> <li>Tabs not switching: Ensure <code>tab-change</code> event is being handled correctly</li> </ul>"},{"location":"current_state/developer_debugger/#debugging-tools","title":"Debugging Tools","text":""},{"location":"current_state/developer_debugger/#local-storage-inspector","title":"Local Storage Inspector","text":"<p>To inspect the application's data in localStorage:</p> <pre><code>// In browser console\nconst userData = JSON.parse(localStorage.getItem('musicBestiesUserData'));\nconsole.table(userData);\n</code></pre>"},{"location":"current_state/developer_debugger/#state-reset","title":"State Reset","text":"<p>To reset the application state for testing:</p> <pre><code>// In browser console\nlocalStorage.removeItem('musicBestiesUserData');\nwindow.location.reload();\n</code></pre>"},{"location":"current_state/developer_debugger/#performance-monitoring","title":"Performance Monitoring","text":"<p>Key performance metrics to monitor:</p> <ul> <li>Time to render dashboard with many albums</li> <li>Drag and drop responsiveness with large song lists</li> <li>State update time when changing rankings</li> </ul>"},{"location":"current_state/overview/","title":"Overview - Music Besties App","text":"<p>Music Besties is a web application designed to help music enthusiasts organize, rank, and review their favorite albums and songs. The application provides an intuitive interface for creating personalized music collections with custom rankings and detailed reviews.</p>"},{"location":"current_state/overview/#page-by-page-overview","title":"Page by page overview","text":"View UI Elements and Their Purpose User Actions Dashboard View \u2022 Header Bar: Contains app title \"My Rankings\", hamburger menu icon, and Edit button\u2022 Era Cards Grid: 2-column (mobile) or 3-column (desktop) grid displaying music era information\u2022 Selection Counter: Shows number of selected items vs. total (e.g., \"2 of 10\")\u2022 Rating Display: Star icons (1-5) showing user ratings when available\u2022 Era Emoji: Visual icon representing each music era\u2022 Footer Disclaimer: Text indicating unofficial status of the app \u2022 Open navigation menu: Tap hamburger icon\u2022 Enter edit mode: Tap Edit button\u2022 View era details: Tap on any era card\u2022 View rankings: Scan cards to see current selections\u2022 Check ratings: View star ratings on cards\u2022 Return to top: Scroll to beginning of grid Edit Rankings View \u2022 Header Controls: Cancel button (red), screen title, Save button (green)\u2022 Tab Navigation Bar: Horizontally scrollable tabs for \"Eras\" and individual era names\u2022 Selection Counter: Shows selected/total count for each tab\u2022 Instruction Text: Contextual heading explaining selection process\u2022 Item Chips: Interactive buttons for each selectable item (era or song)\u2022 Selection Indicators: Blue highlighting and rank numbers (1, 2, 3...) on selected items \u2022 Switch tabs: Tap tab buttons to change category\u2022 Select items: Tap unselected chips to add to ranking\u2022 Remove selections: Tap selected chips to remove from ranking\u2022 Change order: Remove and re-add items to change ranking order\u2022 Save changes: Tap Save button to persist selections\u2022 Cancel editing: Tap Cancel to discard changes and return to dashboard Sidebar Panel \u2022 Panel Header: Title showing selected era/category name and X close button\u2022 Tab Navigation: Two tabs - \"Rankings\" and \"Review &amp; Notes\"\u2022 Rankings List: Ordered list of user's ranked items for the selected category\u2022 Star Rating Display: 1-5 star rating visualization\u2022 Review Text Area: User's written review/comment when available\u2022 Review Form: Star selection inputs, text area with 140 char limit, character counter, save/cancel buttons \u2022 Switch sidebar tabs: Tap tab buttons to toggle between rankings and review\u2022 View rankings: See ordered list of selected items\u2022 Add/edit review: Tap Edit Review button\u2022 Set rating: Select star rating (1-5)\u2022 Write comment: Enter text in comment field (max 140 chars)\u2022 Save review: Submit rating and comment\u2022 Close sidebar: Tap X button to return to previous view About View \u2022 Header Bar: \"About\" title and back button\u2022 App Description: Text explaining app purpose and functionality\u2022 Version Information: App version number and release notes\u2022 Credits Section: Developer and contributor information\u2022 Text Sections: Formatted content with headings and paragraphs \u2022 Read information: Scroll through content sections\u2022 Check version: View current app version\u2022 See credits: View developer information\u2022 Return to previous screen: Tap back button Profile View \u2022 Header Bar: \"Profile\" title and back button\u2022 Profile Image: User avatar/photo placeholder or image\u2022 User Information: Display name and account details\u2022 Statistics Section: Counters for rankings created, reviews written, account age\u2022 Preferences Area: User-specific settings and options \u2022 View profile data: See account information and statistics\u2022 Check activity: Review ranking and review history\u2022 Access settings: Navigate to account-related settings\u2022 Return to previous screen: Tap back button Settings View \u2022 Header Bar: \"Settings\" title and back button\u2022 Settings Categories: Grouped options with section headers\u2022 Toggle Switches: On/off controls for boolean settings\u2022 Radio Buttons: Selection controls for mutually exclusive options\u2022 Dropdown Menus: Selection controls for multiple choice options\u2022 Setting Descriptions: Help text explaining each setting's purpose \u2022 Toggle options: Turn features on/off\u2022 Select preferences: Choose from available options\u2022 Adjust display settings: Modify visual preferences\u2022 Manage notifications: Control notification behavior\u2022 Configure data options: Set data storage preferences\u2022 Return to previous screen: Tap back button Terms/Privacy View \u2022 Header Bar: \"Terms &amp; Privacy\" title and back button\u2022 Section Headers: Titled segments for different legal topics\u2022 Legal Text: Terms of service and privacy policy content\u2022 Data Usage Section: Information about how user data is handled\u2022 Last Updated Timestamp: Date when legal documents were last modified \u2022 Read legal information: Scroll through terms and privacy policy\u2022 Review data practices: Learn about data handling policies\u2022 Check update date: See when documents were last updated\u2022 Return to previous screen: Tap back button Left Sidebar Navigation \u2022 App Branding: App name/logo at top of sidebar\u2022 Navigation Menu: Vertical list of app sections (Dashboard, Profile, Settings, etc.)\u2022 Menu Icons: Visual icons next to each menu item\u2022 Active Indicator: Highlighting or styling showing current section\u2022 Close Button: X button in top corner to dismiss sidebar \u2022 Navigate to section: Tap menu item to go to that screen\u2022 See current location: Identify active section by highlight\u2022 Close menu: Tap X button or swipe to dismiss\u2022 Access all app areas: Reach any major section from one menu"},{"location":"current_state/overview/#text-overview","title":"Text Overview","text":"<p>Music Besties lets you explore, rank, and review your favorite music eras and songs with simple, clear actions.</p> <ul> <li>Browse and Explore: On the main screen, you can scroll through cards showing different music eras. Tap any card to see detailed rankings and reviews for that era.</li> <li>Edit Your Rankings: Tap the Edit button to enter ranking mode. Switch between tabs to see different eras or categories. Tap items to add them to your favorites, tap again to remove them, and reorder your picks by removing and re-adding. When you\u2019re happy, save your changes or cancel to keep things as they were.</li> <li>View and Write Reviews: In the sidebar that opens when you select an era, switch between your ranked list and the review tab. You can rate the era with stars, write a short comment, edit your review anytime, and save your feedback.</li> <li>Navigate Easily: Use the hamburger menu to open the sidebar navigation. From there, jump to any major section like Dashboard, Profile, Settings, About, or Terms \\&amp; Privacy.</li> <li>Manage Your Profile: View your profile details, see how many rankings and reviews you\u2019ve created, and access your preferences.</li> <li>Adjust Settings: Change app themes, notification preferences, and other options to customize your experience.</li> <li>Learn About the App: Read about the app\u2019s purpose, version info, and credits in the About section.</li> <li>Review Legal Info: Check the Terms \\&amp; Privacy section to understand how your data is handled and the app\u2019s policies.</li> <li>Close and Return: Easily close sidebars or menus and return to previous screens whenever you want.</li> </ul>"},{"location":"current_state/overview/#high-level-architecture","title":"High-Level Architecture","text":"<p>Music Besties follows a component-based architecture that promotes modularity, reusability, and maintainability. The application is structured around core views with supporting components that work together to create a cohesive user experience.</p>"},{"location":"current_state/overview/#core-application-structure","title":"Core Application Structure","text":"<ol> <li>Primary Views</li> <li>Dashboard View: The main entry point displaying Era Cards in a responsive grid layout with selection counters and rating displays</li> <li>Edit Rankings View: Interactive interface for selecting and ranking items across different categories</li> <li>Sidebar Panel: Context-sensitive panel for viewing rankings and managing reviews</li> <li> <p>Navigation Sidebar: Global navigation system accessible from all views</p> </li> <li> <p>Supporting Views</p> </li> <li>About View: Informational content about the application</li> <li>Profile View: User-specific information and statistics</li> <li>Settings View: User preference configuration</li> <li> <p>Terms/Privacy View: Legal documentation</p> </li> <li> <p>UI Component Hierarchy</p> </li> <li>Global Components: Header bars, navigation elements, and footer disclaimers</li> <li>Content Components: Era cards, item chips, selection indicators, and rating displays</li> <li>Interactive Elements: Buttons, tabs, toggles, and form inputs</li> </ol>"},{"location":"current_state/overview/#data-flow-architecture","title":"Data Flow Architecture","text":"<p>The application implements a unidirectional data flow pattern: - User selections and rankings are stored and retrieved from a persistent data layer - UI state changes (like entering edit mode) are managed through state containers - Reviews and ratings follow a create-read-update pattern with validation</p> <p>Figure: Application Architecture</p> <pre><code>flowchart TD\n    subgraph MusicBesties[\"Music Besties Application\"]\n        Dashboard[\"Dashboard View\\n(Era Cards Grid)\"] &lt;--\"Navigate between\\nscreens\"--&gt; EditRankings[\"Edit Rankings View\\n(Selection Interface)\"];\n\n        Dashboard --&gt;|\"View details\"| SidebarPanel[\"Sidebar Panel\\n(Rankings &amp; Reviews)\"];\n        EditRankings --&gt;|\"Save/Cancel\"| Dashboard;\n\n        subgraph Navigation[\"Navigation System\"]\n            NavSidebar[\"Left Sidebar Navigation\"]\n            AboutView[\"About View\"]\n            ProfileView[\"Profile View\"]\n            SettingsView[\"Settings View\"]\n            TermsView[\"Terms/Privacy View\"]\n        end\n\n        Dashboard &lt;--&gt; NavSidebar;\n        NavSidebar --&gt;|\"Navigate to\"| AboutView;\n        NavSidebar --&gt;|\"Navigate to\"| ProfileView;\n        NavSidebar --&gt;|\"Navigate to\"| SettingsView;\n        NavSidebar --&gt;|\"Navigate to\"| TermsView;\n\n        classDef primaryViews fill:#f9f,stroke:#333,stroke-width:2px;\n        classDef supportingViews fill:#bbf,stroke:#333,stroke-width:1px;\n        classDef navSystem fill:#dfd,stroke:#333,stroke-width:1px;\n\n        class Dashboard,EditRankings,SidebarPanel primaryViews;\n        class AboutView,ProfileView,SettingsView,TermsView supportingViews;\n        class NavSidebar,Navigation navSystem;\n    end</code></pre> <p>Visual representation of the application's structural organization showing the relationships between primary views, supporting views, and the navigation system. The diagram illustrates how users move between different screens and access functionality through the unified interface.</p>"},{"location":"current_state/overview/#technical-implementation-considerations","title":"Technical Implementation Considerations","text":"<ul> <li>Responsive Design: The UI adapts between mobile (2-column) and desktop (3-column) layouts</li> <li>State Management: Tracks selections, rankings, and review content across view transitions</li> <li>Navigation Patterns: Implements hierarchical navigation with breadcrumb-style return paths</li> <li>Data Persistence: Maintains user rankings and reviews between sessions</li> <li>Accessibility: Incorporates clear visual indicators and semantic structure</li> </ul>"},{"location":"current_state/screens/","title":"Screens Summary","text":"<p>The Music Besties application consists of multiple screens and views that provide a comprehensive user experience for organizing and reviewing music.</p>"},{"location":"current_state/screens/#screen-overview","title":"Screen Overview","text":"View Primary Purpose Key Components Navigation Options Dashboard View Main entry point displaying music era information Era cards grid, Header bar, Selection counter, Rating display, Era emoji, Footer disclaimer Open navigation menu, Enter edit mode, View era details Edit Rankings View Interface for selecting and ranking items Header controls, Tab navigation bar, Selection counter, Instruction text, Item chips, Selection indicators Switch tabs, Select/remove items, Change order, Save/cancel changes Sidebar Panel Context-sensitive panel for viewing rankings and reviews Panel header, Tab navigation, Rankings list, Star rating display, Review text area, Review form Switch sidebar tabs, View rankings, Add/edit review, Close sidebar About View Informational content about the application Header bar, App description, Version information, Credits section, Text sections Read information, Check version, See credits, Return to previous screen Profile View User-specific information and statistics Header bar, Profile image, User information, Statistics section, Preferences area View profile data, Check activity, Access settings, Return to previous screen Settings View User preference configuration Header bar, Settings categories, Toggle switches, Radio buttons, Dropdown menus, Setting descriptions Toggle options, Select preferences, Adjust display settings, Return to previous screen Terms/Privacy View Legal documentation Header bar, Section headers, Legal text, Data usage section, Last updated timestamp Read legal information, Review data practices, Return to previous screen Left Sidebar Navigation Global navigation system App branding, Navigation menu, Menu icons, Active indicator, Close button Navigate to section, See current location, Close menu, Access all app areas"},{"location":"current_state/screens/#dashboard-view","title":"Dashboard View","text":"<p>The Dashboard View is the main entry point of the application. It displays a grid of era cards, each representing a music era that the user can interact with.</p> <p>Figure: Dashboard View Layout</p> <pre><code>+-----------------------------------------------------+\n|                   Music Besties                     |\n+-----------------------------------------------------+\n| \u2630                                         [Edit]    |\n+-----------------------------------------------------+\n|                                                     |\n|  +---------------+  +---------------+  +----------+ |\n|  | \ud83e\udd20            |  | \ud83d\udc9b            |  | \ud83d\udc9c       | |\n|  | Taylor Swift  |  | Fearless      |  | Speak Now| |\n|  | \u2605\u2605\u2605\u2605\u2606        |  | \u2605\u2605\u2605\u2605\u2605        |  | \u2605\u2605\u2605\u2606\u2606    | |\n|  | 5/13 songs    |  | 8/19 songs    |  | 3/16 songs| |\n|  +---------------+  +---------------+  +----------+ |\n|                                                     |\n|  +---------------+  +---------------+  +----------+ |\n|  | \u2764\ufe0f            |  | \ud83c\udf0a            |  | \ud83d\udc0d       | |\n|  | Red           |  | 1989          |  | Reputation| |\n|  | \u2605\u2605\u2605\u2605\u2605        |  | \u2605\u2605\u2605\u2605\u2606        |  | \u2605\u2605\u2605\u2605\u2606    | |\n|  | 12/30 songs   |  | 7/16 songs    |  | 6/15 songs| |\n|  +---------------+  +---------------+  +----------+ |\n|                                                     |\n| This is an unofficial fan-made app                  |\n+-----------------------------------------------------+\n</code></pre> <p>Detailed visualization of the responsive grid interface showing era cards with ratings, selection counts, and emoji indicators. The header includes a hamburger menu icon and Edit button, while the footer contains a disclaimer. This provides a reference for the expected visual arrangement and information hierarchy of the main screen.</p> <p>Key features of the Dashboard View include:</p> <ul> <li>Header bar with app title, hamburger menu icon, and Edit button</li> <li>Responsive grid layout of era cards (2-column on mobile, 3-column on desktop)</li> <li>Visual representation of music eras with emoji icons</li> <li>Rating indicators (1-5 stars) for each era</li> <li>Selection counter showing selected/total items for each era</li> <li>Footer disclaimer indicating unofficial status of the app</li> </ul> <p>The Dashboard View is designed to provide a quick overview of the user's music collection and allow easy access to detailed information about each era.</p>"},{"location":"current_state/screens/#edit-rankings-view","title":"Edit Rankings View","text":"<p>The Edit Rankings View allows users to create and manage rankings for music eras and songs. It provides a selection-based interface with tabbed navigation for different ranking categories.</p> <p>Figure: Edit Rankings View Layout</p> <pre><code>+-----------------------------------------------------+\n|                   Music Besties                     |\n+-----------------------------------------------------+\n| [Cancel]                                    [Save]  |\n+-----------------------------------------------------+\n|                                                     |\n| | Eras | Reputation | Red | 1989 | Folklore |      |\n+-----------------------------------------------------+\n| Selected: 3 of 15                                   |\n| Select your favorite songs:                         |\n|                                                     |\n| +---------------+  +---------------+  +----------+  |\n| | 1             |  | 2             |  | 3        |  |\n| | All Too Well  |  | State of Grace|  | 22       |  |\n| +---------------+  +---------------+  +----------+  |\n|                                                     |\n| +---------------+  +---------------+  +----------+  |\n| | Red           |  | I Knew You    |  | We Are   |  |\n| |               |  | Were Trouble  |  | Never... |  |\n| +---------------+  +---------------+  +----------+  |\n|                                                     |\n| +---------------+  +---------------+                |\n| | Begin Again   |  | Holy Ground   |                |\n| |               |  |               |                |\n| +---------------+  +---------------+                |\n|                                                     |\n+-----------------------------------------------------+\n</code></pre> <p>Complete interface mockup showing the header controls, tab navigation, selection counter, and item chips with selection indicators. The blue highlighting and numbering on selected items illustrates the selection-based ranking approach where order is determined by selection sequence.</p> <p>Key features of the Edit Rankings View include:</p> <ul> <li>Header controls with Cancel (red) and Save (green) buttons</li> <li>Horizontally scrollable tab navigation for \"Eras\" and individual era names</li> <li>Selection counter showing selected/total count for each tab</li> <li>Contextual instruction text explaining the selection process</li> <li>Interactive item chips for each selectable item (era or song)</li> <li>Visual selection indicators with blue highlighting and rank numbers</li> <li>Ability to add items to ranking by tapping unselected chips</li> <li>Ability to remove items from ranking by tapping selected chips</li> <li>Reordering by removing and re-adding items in desired sequence</li> <li>Save functionality to persist selections</li> </ul> <p>The Edit Rankings View is designed to be intuitive and easy to use, allowing users to quickly create and modify their rankings.</p>"},{"location":"current_state/user_experience/","title":"User Navigation","text":""},{"location":"current_state/user_experience/#user-journey-map","title":"User Journey Map","text":"<p>The Music Besties application offers several navigation paths based on user goals. Below are the primary user journeys through the application.</p>"},{"location":"current_state/user_experience/#primary-navigation-flows","title":"Primary Navigation Flows","text":"<pre><code>flowchart TD\n    Start([App Launch]) --&gt; Dashboard[Dashboard View]\n    Dashboard --&gt;|Click Era Card| Sidebar[Sidebar Panel]\n    Dashboard --&gt;|Click Edit Button| EditRankings[Edit Rankings View]\n    Dashboard --&gt;|Click Hamburger Menu| NavSidebar[Left Sidebar Navigation]\n\n    NavSidebar --&gt;|Dashboard| Dashboard\n    NavSidebar --&gt;|Profile| Profile[Profile View]\n    NavSidebar --&gt;|Settings| Settings[Settings View]\n    NavSidebar --&gt;|About| About[About View]\n    NavSidebar --&gt;|Terms &amp; Privacy| Terms[Terms/Privacy View]\n\n    Sidebar --&gt;|Close Button| Dashboard\n    Sidebar --&gt;|Switch to Review Tab| SidebarReview[Review Tab]\n    SidebarReview --&gt;|Edit Review| ReviewPanel[Review Form]\n    ReviewPanel --&gt;|Save/Cancel| SidebarReview\n\n    EditRankings --&gt;|Cancel Button| Dashboard\n    EditRankings --&gt;|Save Button| Dashboard\n\n    Profile --&gt;|Back Button| Dashboard\n    Settings --&gt;|Back Button| Dashboard\n    About --&gt;|Back Button| Dashboard\n    Terms --&gt;|Back Button| Dashboard\n\n    classDef primaryViews fill:#f9f,stroke:#333,stroke-width:2px;\n    classDef supportingViews fill:#bbf,stroke:#333,stroke-width:1px;\n    classDef navSystem fill:#dfd,stroke:#333,stroke-width:1px;\n\n    class Dashboard,EditRankings primaryViews;\n    class Sidebar,SidebarReview,ReviewPanel supportingViews;\n    class NavSidebar,Profile,Settings,About,Terms navSystem;</code></pre>"},{"location":"current_state/user_experience/#user-personas-and-navigation-patterns","title":"User Personas and Navigation Patterns","text":""},{"location":"current_state/user_experience/#casual-listener","title":"Casual Listener","text":"<p>Primary Goals: - Browse album collection - View existing rankings - Occasionally update ratings</p> <p>Typical Navigation Path: 1. Dashboard \u2192 Browse albums 2. Click album \u2192 View sidebar with details 3. Close sidebar \u2192 Return to browsing</p>"},{"location":"current_state/user_experience/#dedicated-curator","title":"Dedicated Curator","text":"<p>Primary Goals: - Maintain detailed rankings of all songs - Write comprehensive reviews - Organize collection meticulously</p> <p>Typical Navigation Path: 1. Dashboard \u2192 Select specific album 2. Edit Rankings \u2192 Spend time organizing songs 3. Return to Dashboard \u2192 Select another album 4. Open Sidebar \u2192 Write detailed review</p>"},{"location":"current_state/user_experience/#new-user","title":"New User","text":"<p>Primary Goals: - Understand app functionality - Set up initial rankings - Explore features</p> <p>Typical Navigation Path: 1. Dashboard \u2192 Explore interface 2. Click album \u2192 Discover sidebar functionality 3. Edit Rankings \u2192 Learn ranking mechanism 4. Return to Dashboard \u2192 Continue exploration</p>"},{"location":"current_state/user_experience/#navigation-decision-points","title":"Navigation Decision Points","text":"Screen Decision Point Possible Actions Next Screens Dashboard Album selection Click album card Album Sidebar Dashboard Edit mode Click Edit Rankings Edit Rankings Screen Album Sidebar Review management Click Edit Review Review Panel Album Sidebar Return to browsing Click Close Dashboard Edit Rankings Song organization Drag songs, Change tabs Remains on Edit Rankings Edit Rankings Exit with changes Click Back with unsaved changes Confirmation Modal Confirmation Modal Data preservation Confirm or Cancel Dashboard or Edit Rankings"},{"location":"current_state/user_interactions/","title":"User Interactions","text":"<p>This section shows all possible ways users can interact with the app </p>"},{"location":"current_state/user_interactions/#selection-and-ranking-workflow","title":"Selection and Ranking Workflow","text":"<p>Figure: Selection Interaction Flow</p> <pre><code>sequenceDiagram\n    participant User\n    participant UI as Selection Interface\n    participant State as Application State\n\n    Note over User,State: Step 1: Initial State\n    Note over UI: Selected: (empty)&lt;br&gt;Unselected: Item A, Item B, Item C\n\n    User-&gt;&gt;UI: Taps Item B\n    UI-&gt;&gt;State: toggleItemSelection(\"B\")\n    State--&gt;&gt;UI: Update selected/unselected lists\n    Note over User,State: Step 2: After tapping Item B\n    Note over UI: Selected: 1. Item B&lt;br&gt;Unselected: Item A, Item C\n\n    User-&gt;&gt;UI: Taps Item A\n    UI-&gt;&gt;State: toggleItemSelection(\"A\")\n    State--&gt;&gt;UI: Update selected/unselected lists\n    Note over User,State: Step 3: After tapping Item A\n    Note over UI: Selected: 1. Item B, 2. Item A&lt;br&gt;Unselected: Item C\n\n    User-&gt;&gt;UI: Taps Item B again\n    UI-&gt;&gt;State: toggleItemSelection(\"B\")\n    State--&gt;&gt;UI: Remove from selection, adjust positions\n    Note over User,State: Step 4: After tapping Item B again\n    Note over UI: Selected: 1. Item A&lt;br&gt;Unselected: Item B, Item C</code></pre> <p>Step-by-step visualization of how items transition between selected and unselected states through user tap interactions. Clarifies the exact behavior expected when users interact with selectable items, including the visual state changes and numbering.</p>"},{"location":"current_state/user_interactions/#era-ranking","title":"Era Ranking","text":"<p>The era ranking workflow allows users to create a personalized ranking of their favorite music eras. The process works as follows:</p> <ol> <li>User navigates to the Edit Rankings View</li> <li>User selects the \"Eras\" tab</li> <li>User taps on unselected era chips to add them to the ranking</li> <li>The order is determined by the sequence of selection</li> <li>User taps on selected era chips to remove them from the ranking</li> <li>User saves changes to persist the ranking</li> </ol>"},{"location":"current_state/user_interactions/#song-ranking","title":"Song Ranking","text":"<p>The song ranking workflow allows users to create a personalized ranking of songs within an era. The process works as follows:</p> <ol> <li>User navigates to the Edit Rankings View</li> <li>User selects an era-specific tab</li> <li>User taps on unselected song chips to add them to the ranking</li> <li>The order is determined by the sequence of selection</li> <li>User taps on selected song chips to remove them from the ranking</li> <li>User saves changes to persist the ranking</li> </ol>"},{"location":"current_state/user_interactions/#review-workflow","title":"Review Workflow","text":""},{"location":"current_state/user_interactions/#creatingediting-reviews","title":"Creating/Editing Reviews","text":"<p>The review creation workflow allows users to add ratings and comments to music eras. The process works as follows:</p> <ol> <li>User navigates to the Dashboard View</li> <li>User taps on an era card to open the Sidebar Panel</li> <li>User switches to the \"Review &amp; Notes\" tab</li> <li>User taps the Edit Review button</li> <li>User sets a star rating (1-5 stars)</li> <li>User adds a text comment (maximum 140 characters)</li> <li>User saves the review to persist the changes</li> </ol>"},{"location":"current_state/user_interactions/#viewing-reviews","title":"Viewing Reviews","text":"<p>Users can view reviews for eras through the Sidebar Panel. The process works as follows:</p> <ol> <li>User navigates to the Dashboard View</li> <li>User taps on an era card to open the Sidebar Panel</li> <li>User switches to the \"Review &amp; Notes\" tab</li> <li>The review section displays the current rating and comment</li> </ol>"},{"location":"current_state/user_interactions/#navigation-patterns","title":"Navigation Patterns","text":""},{"location":"current_state/user_interactions/#dashboard-navigation","title":"Dashboard Navigation","text":"<p>The Dashboard View provides the following navigation options:</p> <ul> <li>Tapping the hamburger menu icon opens the Left Sidebar Navigation</li> <li>Tapping the Edit button enters edit mode</li> <li>Tapping on an era card opens the Sidebar Panel for that era</li> </ul>"},{"location":"current_state/user_interactions/#edit-rankings-navigation","title":"Edit Rankings Navigation","text":"<p>The Edit Rankings View provides the following navigation options:</p> <ul> <li>Tabs allow switching between \"Eras\" and individual era names</li> <li>The Cancel button (red) discards changes and returns to the Dashboard View</li> <li>The Save button (green) persists changes and returns to the Dashboard View</li> </ul>"},{"location":"current_state/user_interactions/#sidebar-panel-navigation","title":"Sidebar Panel Navigation","text":"<p>The Sidebar Panel provides the following navigation options:</p> <ul> <li>The X close button closes the panel and returns to the previous view</li> <li>Tabs allow switching between \"Rankings\" and \"Review &amp; Notes\"</li> <li>The Edit Review button navigates to the review form</li> </ul>"},{"location":"current_state/user_interactions/#left-sidebar-navigation","title":"Left Sidebar Navigation","text":"<p>The Left Sidebar Navigation provides the following navigation options:</p> <ul> <li>Menu items for Dashboard, Profile, Settings, About, and Terms &amp; Privacy</li> <li>The X close button dismisses the sidebar</li> <li>Visual indicators show the currently active section</li> </ul>"},{"location":"future_states/backlog/","title":"Future State Backlog","text":"<p>This document contains a prioritized list of potential features and improvements for future versions of the Music Besties application.</p>"},{"location":"future_states/backlog/#feature-backlog","title":"Feature Backlog","text":"Priority Feature/Improvement Description Estimated Effort Target Version Status High Social sharing Allow users to share album rankings and reviews on social media Medium v1.1 Planned High Expanded album database Increase the number of supported albums and artists High v1.1 In Progress High Drag-and-drop reordering Improve ranking interface with drag-and-drop functionality Medium v1.1 Planned High Data export Enable exporting rankings and reviews to CSV/JSON Low v1.1 Not Started Medium Dark mode Implement dark mode UI option Medium v1.2 Not Started Medium Custom album covers Allow users to upload custom album artwork Low v1.2 Not Started Medium Listening statistics Track and display user listening habits over time High v2.0 Not Started Medium Multiple ranking lists Support multiple ranking lists per album (e.g., by mood, occasion) Medium v1.2 Not Started Medium Offline support Enable full functionality without internet connection High v1.3 Not Started Low Animation enhancements Add subtle animations to improve user experience Low v1.3 Not Started Low Keyboard shortcuts Implement keyboard shortcuts for power users Low v1.3 Not Started Low Custom themes Allow users to customize app colors and appearance Medium v2.0 Not Started Low Voice input Add support for voice commands and dictation High v2.0 Not Started"},{"location":"future_states/backlog/#technical-debt","title":"Technical Debt","text":"Item Description Impact Priority State management refactoring Migrate from simple reactive state to Vuex/Pinia for better scalability High High Test coverage Implement comprehensive unit and integration tests Medium High Code documentation Improve inline documentation and generate API docs Medium Medium Performance optimization Optimize rendering of large album collections High Medium Browser compatibility Address edge cases in older browsers Low Low"},{"location":"future_states/vision/","title":"Future State Vision","text":"<p>This document provides high-level descriptions of potential future releases and their key features for the Music Besties application.</p>"},{"location":"future_states/vision/#v20-vision","title":"v2.0 Vision","text":"<p>Theme: Social Music Experience</p> <p>Key Features: - Friend connections to share album rankings and reviews - Collaborative playlist creation with friends - Music taste compatibility scoring between users - Real-time listening parties with synchronized playback</p> <p>Target User Experience: Transform Music Besties from a personal music organization tool into a social platform where users can discover music through friends' recommendations, collaborate on rankings, and share their musical journey. The experience will focus on meaningful music connections rather than generic social networking.</p> <p>Technical Foundation: - User authentication and profile management system - Real-time database for collaborative features - Integration with music streaming APIs for synchronized listening - Enhanced data models to support social relationships</p> <p>Estimated Timeline: Q3 2026</p>"},{"location":"future_states/vision/#v30-vision","title":"v3.0 Vision","text":"<p>Theme: Music Discovery and Analytics</p> <p>Key Features: - AI-powered music recommendations based on user preferences - Detailed listening analytics and insights - Integration with multiple streaming platforms - Advanced visualization of music taste evolution over time</p> <p>Target User Experience: Enhance the user's ability to discover new music that aligns with their taste while providing meaningful analytics about their listening habits. Users will gain insights into how their music preferences have evolved and receive personalized recommendations that expand their musical horizons.</p> <p>Technical Foundation: - Machine learning recommendation engine - Data analytics pipeline for user insights - Multi-platform API integrations - Advanced data visualization components</p> <p>Estimated Timeline: Q2 2027</p>"},{"location":"future_states/vision/#long-term-vision","title":"Long-Term Vision","text":"<p>Theme: Music Ecosystem and Cultural Connection</p> <p>Key Concepts: - Cross-cultural music discovery and appreciation - Community-driven music curation and preservation - Integration with live music experiences and events - Comprehensive music knowledge base with historical context</p> <p>Aspirational Goals: Transform Music Besties into a comprehensive platform that not only helps users organize and discover music but also connects them to the broader cultural and historical context of the music they love. Create a community that celebrates musical diversity and helps preserve musical heritage while facilitating meaningful connections between listeners, artists, and the stories behind the music.</p> <p>Target Market Position: Establish Music Besties as the go-to platform for music enthusiasts seeking a deeper understanding and connection to the music they love, while becoming a leading authority in music curation, preservation, and cultural exchange.</p> <p>Technology Evolution: Evolve the platform to incorporate emerging technologies such as augmented reality, blockchain, and AI-driven content creation to further enhance the user experience, ensure the integrity and authenticity of music metadata, and provide new avenues for artists and creators to share their work.</p> <p>User Experience Goals: Create a seamless, intuitive experience that adapts to each user's unique relationship with music. The platform should feel like an extension of the user's musical identity, anticipating needs and facilitating deeper connections with music in ways that feel natural and enriching rather than technological.</p>"},{"location":"next_state/application_overview/","title":"Application Overview","text":""},{"location":"next_state/application_overview/#high-level-architecture","title":"High-Level Architecture","text":"<p>Music Besties follows a component-based architecture that promotes modularity, reusability, and maintainability. The application consists of two primary screens with supporting components that work together to create a cohesive user experience.</p> <p>Figure: Application Architecture</p> <pre><code>flowchart TD\n    subgraph MusicBesties[\"Music Besties Application\"]\n        Dashboard[\"Dashboard Screen\\n(Main application view)\"] &lt;--\"Navigate between\\nscreens\"--&gt; EditRankings[\"Edit Rankings Screen\\n(Drag &amp; drop interface)\"];\n\n        Dashboard --&gt;|\"View album\\ndetails\"| AlbumSidebar[\"Album Sidebar Panel\\n(Song lists, ratings, reviews)\"];\n        EditRankings --&gt;|\"Confirm\\nactions\"| ConfirmationModal[\"Confirmation Modal\\n(Save/discard changes)\"];\n\n        classDef screens fill:#f9f,stroke:#333,stroke-width:2px;\n        classDef components fill:#bbf,stroke:#333,stroke-width:1px;\n\n        class Dashboard,EditRankings screens;\n        class AlbumSidebar,ConfirmationModal components;\n    end</code></pre> <p>Visual representation of the component relationships showing how the Dashboard and Edit Rankings screens interact with supporting panels. Provides developers with a clear understanding of the application's structural organization and navigation flow between major components.</p>"},{"location":"next_state/application_overview/#22-component-specifications","title":"2.2. Component Specifications","text":"<p>For implementation by the production team, here are the detailed specifications of key components:</p> <p>Figure 2.2.20: DashboardCard Component Specification</p> <pre><code>+----------------------------------+\n| Component: DashboardCard         |\n+----------------------------------+\n| Props:                           |\n| - tabId: string (required)       |\n|   Album identifier               |\n| - title: string (required)       |\n|   Album title to display         |\n| - emoji: string                  |\n|   Emoji character for album      |\n| - rating: number (0-5)           |\n|   User's rating (whole numbers)  |\n| - selectedCount: number          |\n|   Number of selected songs       |\n| - totalCount: number (required)  |\n|   Total number of songs          |\n+----------------------------------+\n| Events:                          |\n| - @open-sidebar: Emitted when    |\n|   card is clicked                |\n|   Payload: tabId                 |\n+----------------------------------+\n| CSS Classes:                     |\n| - dashboard-grid-card            |\n| - dashboard-stars                |\n+----------------------------------+\n</code></pre> <p>Technical blueprint detailing all required props, emitted events, and CSS classes for the album card component. Enables consistent implementation of album cards with proper data validation and event handling.</p> <p>Figure 2.2.30: SidebarPanel Component Specification</p> <pre><code>+----------------------------------+\n| Component: SidebarPanel          |\n+----------------------------------+\n| Props:                           |\n| - visible: boolean (required)    |\n|   Controls panel visibility      |\n| - tabId: string (required)       |\n|   Current active album id        |\n| - tabTitle: string (required)    |\n|   Title to display in panel      |\n| - sidebarTabs: Array (required)  |\n|   Tab configuration objects      |\n+----------------------------------+\n| Events:                          |\n| - @close: When panel closes      |\n| - @switch-tab: When tab changes  |\n|   Payload: tabId                 |\n+----------------------------------+\n| CSS Classes:                     |\n| - fixed inset-0                  |\n| - max-w-sm                       |\n| - bg-white shadow-xl             |\n+----------------------------------+\n</code></pre> <p>Complete interface definition for the sliding panel including visibility controls and tab management. Ensures proper implementation of the panel's responsive behavior and event communication with parent components.</p> <p>Figure 2.2.40: EditRankingsTabs Component Specification</p> <pre><code>+----------------------------------+\n| Component: EditRankingsTabs      |\n+----------------------------------+\n| Props:                           |\n| - tabs: Array (required)         |\n|   Tab configuration objects      |\n| - activeTab: string (required)   |\n|   Current active tab id          |\n| - rankedItems: Array (required)  |\n|   Items in ranked order          |\n| - unrankedItems: Array (required)|\n|   Items not yet ranked           |\n+----------------------------------+\n| Events:                          |\n| - @switch-tab: When tab changes  |\n|   Payload: tabId                 |\n| - @toggle-rank: When item rank   |\n|   changes                        |\n|   Payload: {id, ranked}          |\n+----------------------------------+\n| CSS Classes:                     |\n| - flex flex-col flex-grow        |\n| - overflow-x-auto                |\n| - sticky top-14 z-10             |\n+----------------------------------+\n</code></pre> <p>Technical requirements for the tab navigation system including data structures for ranked and unranked items. Facilitates correct implementation of the ranking interface with proper state management.</p>"},{"location":"next_state/components/","title":"Component Details","text":"<p>This section provides detailed specifications for the key components in the Music Besties application.</p>"},{"location":"next_state/components/#component-hierarchy","title":"Component Hierarchy","text":"<p>The application is structured around these key components, which are implemented in Vue.js:</p> <p>Figure: Component Hierarchy</p> <pre><code>flowchart TD\n    App[\"App.vue\\n(Root component)\"] --&gt; Dashboard[\"DashboardCard.vue\\n(Multiple instances in grid)\"];\n    App --&gt; EditRankings[\"EditRankingsTabs.vue\\n(Ranking interface)\"];\n    App --&gt; Sidebar[\"SidebarPanel.vue\\n(Sliding information panel)\"];\n    App --&gt; Modal[\"ModalDialog.vue\\n(Reusable confirmation dialogs)\"];\n\n    EditRankings --&gt; DraggableItem[\"DraggableItem.vue\\n(Multiple draggable instances)\"];\n\n    %% Add styling for component types\n    classDef root fill:#f96,stroke:#333,stroke-width:4px;\n    classDef container fill:#9cf,stroke:#333,stroke-width:2px;\n    classDef item fill:#cfc,stroke:#333,stroke-width:1px;\n\n    %% Apply classes to nodes\n    class App root;\n    class Dashboard,EditRankings,Sidebar,Modal container;\n    class DraggableItem item;</code></pre> <p>Tree diagram showing the Vue.js component inheritance and composition structure from App.vue down to individual UI elements. Helps developers understand component dependencies and the proper location for implementing new features or modifications.</p> <ul> <li>App.vue: The root component that manages routing and global state</li> <li>DashboardCard.vue: Reusable component for album display on the dashboard</li> <li>EditRankingsTabs.vue: Container for the ranking interface with tabs</li> <li>DraggableItem.vue: Interactive component for selection functionality</li> <li>SidebarPanel.vue: Sliding panel for detailed album information</li> <li>ModalDialog.vue: Reusable dialog component for confirmations</li> </ul>"},{"location":"next_state/components/#component-dashboardcard","title":"Component: DashboardCard","text":"Property Type Required Description <code>tabId</code> <code>string</code> Yes Album identifier <code>title</code> <code>string</code> Yes Album title to display <code>emoji</code> <code>string</code> No Emoji character for album <code>rating</code> <code>number</code> (0-5) No User's rating (whole numbers) <code>selectedCount</code> <code>number</code> No Number of selected songs <code>totalCount</code> <code>number</code> Yes Total number of songs <p>Events:</p> Event Payload Description <code>@open-sidebar</code> <code>tabId: string</code> Emitted when card is clicked <p>CSS Classes:</p> <ul> <li><code>dashboard-grid-card</code></li> <li><code>dashboard-stars</code> <pre><code>## 4.2. Album Sidebar Panel\n\n### 4.2.1. Panel Structure and Functionality\n\nThe Album Sidebar Panel is a sliding panel that provides detailed information about a selected album. It includes the following features:\n\n- Album title and emoji\n- List of songs\n- Rating and review information\n- Navigation to other albums\n\n### 4.2.2. Album Example\n\nThe sidebar panel displays album information in a structured format, with clear sections for songs, ratings, and reviews.\n\n**Figure 4.1.10: Album Sidebar Panel Layout**\n</code></pre> +-----------------------------------------------------+ |  \u2190 Red \u2764\ufe0f                                          | +-----------------------------------------------------+ |                                                     | | Songs:                                              | |                                                     | | Ranked:                                             | | 1. All Too Well                                     | | 2. State of Grace                                   | | 3. 22                                               | |                                                     | | Unranked:                                           | | \u2022 Red                                               | | \u2022 I Knew You Were Trouble                           | | \u2022 We Are Never Ever Getting Back Together           | | \u2022 Begin Again                                       | | \u2022 Holy Ground                                       | | \u2022 The Last Time                                     | | \u2022 I Almost Do                                       | |                                                     | | Your Review:                                        | | \u2605\u2605\u2605\u2605\u2605                                              | | \"This album perfectly captures the emotions of      | | heartbreak and moving on. All Too Well is an        | | absolute masterpiece.\"                              | |                                                     | | Last updated: May 5, 2025                           | |                                                     | +-----------------------------------------------------+ <pre><code>*Detailed panel structure showing the song ranking interface with numbered positions and the scrollable unranked songs section. Demonstrates how the component handles varying amounts of content through scrolling while maintaining a consistent visual structure.*\n\n## 4.3. Review Panel\n\nThe Review Panel allows users to add and edit reviews for albums. It includes:\n\n- Star rating system (0-5 stars)\n- Text input for comments\n- Save and cancel buttons\n- Timestamp information for when the review was last updated\n\n**Figure 4.2.10: Review Panel Layout**\n</code></pre> +-----------------------------------------------------+ |  Edit Review: Red \u2764\ufe0f                               | +-----------------------------------------------------+ |                                                     | | Rating:                                             | |                                                     | | \u2605\u2605\u2605\u2605\u2605                                              | | \u2606\u2606\u2606\u2606\u2606                                              | |                                                     | | Comments:                                           | |                                                     | | +---------------------------------------------------+ | | This album perfectly captures the emotions of     | | | heartbreak and moving on. All Too Well is an      | | | absolute masterpiece.                             | | |                                                   | | |                                                   | | +---------------------------------------------------+ |                                                     | | Last updated: May 5, 2025                           | |                                                     | | [Save]                [Cancel]                      | |                                                     | +-----------------------------------------------------+ ```</li> </ul> <p>Comprehensive view of the star rating system and comment field with timestamp display for album reviews. Shows the expected input mechanisms and data display for the review creation and viewing process.</p>"},{"location":"next_state/developer_guide/","title":"Developer Implementation Guide","text":"<p>This section provides guidelines and best practices for developers working on the Music Besties application.</p>"},{"location":"next_state/developer_guide/#implementation-checklist","title":"Implementation Checklist","text":"<p>When implementing new features or modifying existing components, use this checklist to ensure consistency:</p> <p>Figure: Implementation Checklist</p> <pre><code>+----------------------------------+\n| Implementation Checklist         |\n+----------------------------------+\n| \u2610 Component props validated      |\n| \u2610 Event handlers connected       |\n| \u2610 LocalStorage updates confirmed |\n| \u2610 Responsive behavior tested     |\n| \u2610 Accessibility requirements met |\n| \u2610 State management integrated    |\n+----------------------------------+\n</code></pre> <p>Comprehensive verification steps for ensuring all aspects of component implementation meet application standards. Serves as a quality assurance tool for developers to validate their implementation against established requirements.</p>"},{"location":"next_state/developer_guide/#82-data-flow-implementation","title":"8.2. Data Flow Implementation","text":"<p>The application's data flow is implemented as follows:</p> <p>Figure 8.2.10: Data Flow Implementation</p> <pre><code>flowchart LR\n    UserAction[\"User Action\\n(tap, drag, input)\"] --&gt;|\"Triggers\"| VueMethods[\"Vue Methods\\n(event handlers)\"];\n    VueMethods --&gt;|\"Commits changes to\"| StateUpdate[\"State Update\\n(reactive data)\"];\n\n    StateUpdate --&gt;|\"Persists data to\"| LocalStorage[\"LocalStorage\\n(browser cache)\"];\n    StateUpdate --&gt;|\"Reactively updates\"| UIUpdate[\"UI Update\\n(DOM changes)\"];\n    UserAction --&gt;|\"Observes\"| UIUpdate;\n\n    %% Add styling\n    classDef action fill:#f96,stroke:#333,stroke-width:2px;\n    classDef process fill:#9cf,stroke:#333,stroke-width:2px;\n    classDef storage fill:#fd7,stroke:#333,stroke-width:2px;\n    classDef display fill:#9f9,stroke:#333,stroke-width:2px;\n\n    class UserAction action;\n    class VueMethods,StateUpdate process;\n    class LocalStorage storage;\n    class UIUpdate display;</code></pre> <p>Technical process diagram showing the complete cycle from user actions through Vue methods to state updates and UI rendering. Illustrates the expected implementation pattern for maintaining data consistency between user interactions and persistent storage.</p> <p>Key methods involved in this flow include: - <code>toggleItemRank()</code>: Updates ranking order when an item is tapped - <code>saveAndExit()</code>: Persists changes to LocalStorage and returns to dashboard - <code>setup()</code>: Initializes state from LocalStorage on component mount - <code>updateReview()</code>: Saves review changes to LocalStorage</p>"},{"location":"next_state/developer_guide/#83-interaction-implementation","title":"8.3. Interaction Implementation","text":"<p>The ranking functionality is implemented through click/tap handlers:</p> <p>Figure 8.3.10: Ranking Interaction Implementation</p> <pre><code>+----------------------------------+\n| Ranking Interaction              |\n+----------------------------------+\n| Implementation:                  |\n| - Click handler: toggleItemRank()|\n| - State update: Updates array    |\n|   order in currentSelectionOrders|\n| - Visual feedback: Applies       |\n|   .chip-rank-indicator class     |\n|   with position number           |\n+----------------------------------+\n</code></pre> <p>Technical details of how the ranking interaction is implemented in code, including the specific methods, state updates, and CSS classes involved. Provides developers with concrete implementation guidance for maintaining or extending the ranking functionality.</p> <p>The star rating system is implemented using: - Whole star characters (\u2605 and \u2606) - Click handlers to set the rating value (1-5) - Visual feedback showing the selected rating</p>"},{"location":"next_state/developer_guide/#84-performance-considerations","title":"8.4. Performance Considerations","text":"<p>For optimal performance when implementing new features:</p> <ol> <li>Minimize DOM manipulations</li> <li>Use Vue's reactive system for state changes</li> <li>Implement proper cleanup in component unmount hooks</li> <li>Leverage browser caching for LocalStorage data</li> <li>Keep the bundle size small by avoiding unnecessary dependencies</li> </ol>"},{"location":"next_state/developer_guide/#85-accessibility-guidelines","title":"8.5. Accessibility Guidelines","text":"<p>To ensure the application is accessible to all users:</p> <ol> <li>Use semantic HTML elements</li> <li>Provide appropriate ARIA attributes</li> <li>Ensure keyboard navigation works for all interactive elements</li> <li>Maintain sufficient color contrast</li> <li>Test with screen readers</li> </ol>"},{"location":"next_state/developer_guide/#86-code-style-and-conventions","title":"8.6. Code Style and Conventions","text":"<p>Follow these conventions to maintain code consistency:</p> <ol> <li>Use camelCase for variable and function names</li> <li>Use PascalCase for component names</li> <li>Use kebab-case for CSS class names</li> <li>Document component props and events</li> <li>Use descriptive names for functions and variables</li> </ol> <p>By following these implementation guidelines, developers can maintain consistency with the existing codebase while ensuring the application remains performant and maintainable.</p>"},{"location":"next_state/interactions/","title":"User Interactions","text":"<p>This section details the key user interaction patterns in the Music Besties application.</p>"},{"location":"next_state/interactions/#ranking-workflow","title":"Ranking Workflow","text":"<p>Figure: Ranking Interaction Flow</p> <pre><code>sequenceDiagram\n    participant User\n    participant UI as Ranking Interface\n    participant State as Application State\n\n    Note over User,State: Step 1: Initial State\n    Note over UI: Ranked: (empty)&lt;br&gt;Unranked: Item A, Item B, Item C\n\n    User-&gt;&gt;UI: Taps Item B\n    UI-&gt;&gt;State: toggleItemRank(\"B\")\n    State--&gt;&gt;UI: Update ranked/unranked lists\n    Note over User,State: Step 2: After tapping Item B\n    Note over UI: Ranked: 1. Item B&lt;br&gt;Unranked: Item A, Item C\n\n    User-&gt;&gt;UI: Taps Item A\n    UI-&gt;&gt;State: toggleItemRank(\"A\")\n    State--&gt;&gt;UI: Update ranked/unranked lists\n    Note over User,State: Step 3: After tapping Item A\n    Note over UI: Ranked: 1. Item B, 2. Item A&lt;br&gt;Unranked: Item C\n\n    User-&gt;&gt;UI: Taps Item B again\n    UI-&gt;&gt;State: toggleItemRank(\"B\")\n    State--&gt;&gt;UI: Remove from ranking, adjust positions\n    Note over User,State: Step 4: After tapping Item B again\n    Note over UI: Ranked: 1. Item A&lt;br&gt;Unranked: Item B, Item C</code></pre> <p>Step-by-step visualization of how items transition between ranked and unranked states through user tap interactions. Clarifies the exact behavior expected when users interact with rankable items, including the visual state changes.</p>"},{"location":"next_state/interactions/#511-album-ranking","title":"5.1.1. Album Ranking","text":"<p>The album ranking workflow allows users to create a personalized ranking of their favorite albums. The process works as follows:</p> <ol> <li>User navigates to the Edit Rankings Screen</li> <li>User selects the \"Albums\" tab</li> <li>User taps on unranked albums to add them to the ranked list</li> <li>User can reorder ranked albums by dragging and dropping</li> <li>User taps on ranked albums to remove them from the ranking</li> <li>User saves changes to persist the ranking</li> </ol>"},{"location":"next_state/interactions/#512-song-ranking","title":"5.1.2. Song Ranking","text":"<p>The song ranking workflow allows users to create a personalized ranking of songs within an album. The process works as follows:</p> <ol> <li>User navigates to the Edit Rankings Screen</li> <li>User selects an album-specific tab</li> <li>User taps on unranked songs to add them to the ranked list</li> <li>User can reorder ranked songs by dragging and dropping</li> <li>User taps on ranked songs to remove them from the ranking</li> <li>User saves changes to persist the ranking</li> </ol>"},{"location":"next_state/interactions/#52-review-workflow","title":"5.2. Review Workflow","text":""},{"location":"next_state/interactions/#521-creatingediting-reviews","title":"5.2.1. Creating/Editing Reviews","text":"<p>The review creation workflow allows users to add ratings and comments to albums. The process works as follows:</p> <ol> <li>User navigates to the Dashboard Screen</li> <li>User taps on an album to open the Sidebar Panel</li> <li>User taps on the review section</li> <li>User sets a star rating (0-5 stars)</li> <li>User adds a text comment (optional)</li> <li>User saves the review to persist the changes</li> </ol>"},{"location":"next_state/interactions/#522-viewing-reviews","title":"5.2.2. Viewing Reviews","text":"<p>Users can view reviews for albums through the Sidebar Panel. The process works as follows:</p> <ol> <li>User navigates to the Dashboard Screen</li> <li>User taps on an album to open the Sidebar Panel</li> <li>The review section displays the current rating and comment</li> <li>User can tap on the review section to edit the review</li> </ol>"},{"location":"next_state/interactions/#53-navigation-patterns","title":"5.3. Navigation Patterns","text":""},{"location":"next_state/interactions/#531-dashboard-navigation","title":"5.3.1. Dashboard Navigation","text":"<p>The Dashboard Screen provides the following navigation options:</p> <ul> <li>Tapping on an album card opens the Sidebar Panel for that album</li> <li>Tapping on the ranking button navigates to the Edit Rankings Screen</li> </ul>"},{"location":"next_state/interactions/#532-edit-rankings-navigation","title":"5.3.2. Edit Rankings Navigation","text":"<p>The Edit Rankings Screen provides the following navigation options:</p> <ul> <li>Tabs at the top allow switching between different ranking categories</li> <li>The back button returns to the Dashboard Screen</li> <li>The save button persists changes and returns to the Dashboard Screen</li> </ul>"},{"location":"next_state/interactions/#533-sidebar-panel-navigation","title":"5.3.3. Sidebar Panel Navigation","text":"<p>The Sidebar Panel provides the following navigation options:</p> <ul> <li>The close button closes the panel and returns to the Dashboard Screen</li> <li>Tabs at the top allow switching between different albums</li> <li>The edit button navigates to the Edit Rankings Screen for the current album</li> </ul>"},{"location":"next_state/screens/","title":"Core Screens","text":"<p>The Music Besties application consists of two primary screens that provide the main functionality of the application.</p>"},{"location":"next_state/screens/#dashboard-screen","title":"Dashboard Screen","text":"<p>The Dashboard Screen is the main entry point of the application. It displays a grid of album cards, each representing an album that the user can interact with.</p> <p>Figure: Dashboard Screen Layout</p> <pre><code>+-----------------------------------------------------+\n|                   Music Besties                     |\n+-----------------------------------------------------+\n|                                                     |\n|  +---------------+  +---------------+  +----------+ |\n|  | \ud83e\udd20            |  | \ud83d\udc9b            |  | \ud83d\udc9c       | |\n|  | Taylor Swift  |  | Fearless      |  | Speak Now| |\n|  | \u2605\u2605\u2605\u2605\u2606        |  | \u2605\u2605\u2605\u2605\u2605        |  | \u2605\u2605\u2605\u2606\u2606    | |\n|  | 5/13 songs    |  | 8/19 songs    |  | 3/16 songs| |\n|  +---------------+  +---------------+  +----------+ |\n|                                                     |\n|  +---------------+  +---------------+  +----------+ |\n|  | \u2764\ufe0f            |  | \ud83c\udf0a            |  | \ud83d\udc0d       | |\n|  | Red           |  | 1989          |  | Reputation| |\n|  | \u2605\u2605\u2605\u2605\u2605        |  | \u2605\u2605\u2605\u2605\u2606        |  | \u2605\u2605\u2605\u2605\u2606    | |\n|  | 12/30 songs   |  | 7/16 songs    |  | 6/15 songs| |\n|  +---------------+  +---------------+  +----------+ |\n|                                                     |\n+-----------------------------------------------------+\n</code></pre> <p>Detailed visualization of the responsive grid interface showing album cards with ratings, selection counts, and emoji indicators. Provides a reference for the expected visual arrangement and information hierarchy of the main screen.</p> <p>Key features of the Dashboard Screen include:</p> <ul> <li>Grid layout of album cards</li> <li>Visual representation of albums with emoji icons</li> <li>Rating indicators for each album</li> <li>Selection count indicators showing how many songs are selected from each album</li> <li>Navigation to the Edit Rankings Screen</li> </ul> <p>The Dashboard Screen is designed to provide a quick overview of the user's music collection and allow easy access to detailed information about each album.</p>"},{"location":"next_state/screens/#32-edit-rankings-screen","title":"3.2. Edit Rankings Screen","text":"<p>The Edit Rankings Screen allows users to create and manage rankings for albums and songs. It provides a tabbed interface for different ranking categories.</p> <p>Figure 3.2.10: Edit Rankings Screen Layout</p> <pre><code>+-----------------------------------------------------+\n|                   Music Besties                     |\n+-----------------------------------------------------+\n|                                                     |\n| | Albums | Red | 1989 | Folklore | Evermore |       |\n+-----------------------------------------------------+\n|                                                     |\n| Ranked Items:                                       |\n|                                                     |\n| +---------------+  +---------------+  +----------+  |\n| | 1             |  | 2             |  | 3        |  |\n| | All Too Well  |  | State of Grace|  | 22       |  |\n| +---------------+  +---------------+  +----------+  |\n|                                                     |\n| Unranked Items:                                     |\n|                                                     |\n| +---------------+  +---------------+  +----------+  |\n| | Red           |  | I Knew You    |  | We Are   |  |\n| |               |  | Were Trouble  |  | Never... |  |\n| +---------------+  +---------------+  +----------+  |\n|                                                     |\n| +---------------+  +---------------+                |\n| | Begin Again   |  | Holy Ground   |                |\n| |               |  |               |                |\n| +---------------+  +---------------+                |\n|                                                     |\n+-----------------------------------------------------+\n</code></pre> <p>Complete interface mockup showing the tab navigation, ranked items with position indicators, and unranked items section. Illustrates the expected UI state during the ranking process, helping developers understand the visual feedback requirements.</p> <p>Key features of the Edit Rankings Screen include:</p> <ul> <li>Tabbed navigation for different ranking categories</li> <li>Drag-and-drop interface for ranking items</li> <li>Clear visual distinction between ranked and unranked items</li> <li>Ability to add and remove items from rankings</li> <li>Save functionality to persist changes</li> </ul> <p>The Edit Rankings Screen is designed to be intuitive and easy to use, allowing users to quickly create and modify their rankings.</p>"},{"location":"next_state/technical/","title":"Technical Implementation","text":"<p>This section details the technical implementation of the Music Besties application.</p>"},{"location":"next_state/technical/#data-management","title":"Data Management","text":"<p>The application's data structure is organized as shown in this diagram, which represents the conceptual model rather than the exact implementation:</p> <p>Figure: Data Structure Model</p> <pre><code>classDiagram\n    class AlbumObject {\n        &lt;&lt;Core Data&gt;&gt;\n        String id\n        String name\n        String emoji\n        Array~String~ songs\n        +getSongCount() int\n        +getFormattedTitle() String\n    }\n\n    class UserSelections {\n        &lt;&lt;User Preferences&gt;&gt;\n        String albumId\n        Array~String~ selectedSongs\n        Array~String~ rankOrder\n        +addToRanking(songId) void\n        +removeFromRanking(songId) void\n        +moveInRanking(songId, newPosition) void\n    }\n\n    class UserReviews {\n        &lt;&lt;User Content&gt;&gt;\n        String albumId\n        Number rating\n        String comment\n        DateTime timestamp\n        +updateRating(newRating) void\n        +updateComment(newComment) void\n    }\n\n    AlbumObject \"1\" --o \"0..1\" UserSelections : references &gt;\n    AlbumObject \"1\" --o \"0..1\" UserReviews : references &gt;</code></pre> <p>Conceptual diagram showing the relationships and composition of album objects, user selections, and review data. Provides developers with an understanding of the data architecture to properly implement state management.</p>"},{"location":"next_state/technical/#611-album-metadata","title":"6.1.1. Album Metadata","text":"<p>The application manages album metadata including: - Album ID (e.g., 'taylor-swift', 'red') - Album name (e.g., 'Taylor Swift', 'Red') - Representative emoji (e.g., \ud83e\udd20, \u2764\ufe0f) - List of songs for each album</p>"},{"location":"next_state/technical/#612-user-data","title":"6.1.2. User Data","text":"<p>User-specific data includes: - Selected songs for each album - Ranking order of albums and songs - Star ratings (whole numbers from 0-5) - Text comments for album reviews</p>"},{"location":"next_state/technical/#613-state-structure","title":"6.1.3. State Structure","text":"<p>The application's state is stored in LocalStorage with this structure:</p> <p>Figure 6.1.30: LocalStorage Data Structure</p> <pre><code>erDiagram\n    LOCALSTORAGE ||--o{ ALBUM_DATA : stores\n\n    LOCALSTORAGE {\n        string key \"music-besties-data\"\n        object value\n    }\n\n    ALBUM_DATA {\n        object selectedSongs\n        object rankings\n        object reviews\n    }\n\n    ALBUM_DATA ||--o{ SELECTED_SONGS : contains\n    ALBUM_DATA ||--o{ RANKINGS : contains\n    ALBUM_DATA ||--o{ REVIEWS : contains\n\n    SELECTED_SONGS {\n        string albumId\n        array songList\n    }\n\n    RANKINGS {\n        string categoryId\n        array orderedItems\n    }\n\n    REVIEWS {\n        string albumId\n        number rating\n        string comment\n        datetime timestamp\n    }</code></pre> <p>Exact JSON structure showing the format of stored data including selectedSongs, rankings, and reviews with their nested properties. Ensures consistent data persistence implementation with the correct property names and data types.</p> <p>This structure is accessed via the key 'music-besties-data' in the browser's LocalStorage. The application loads this data on startup and updates it when changes are made to rankings or reviews.</p>"},{"location":"next_state/technical/#62-storage-mechanisms","title":"6.2. Storage Mechanisms","text":""},{"location":"next_state/technical/#621-localstorage","title":"6.2.1. LocalStorage","text":"<p>The application uses the browser's LocalStorage API to persist user data between sessions. This approach has the following advantages:</p> <ul> <li>No server-side storage requirements</li> <li>Data remains available even when offline</li> <li>Simple API for storing and retrieving JSON data</li> </ul> <p>However, it also has limitations:</p> <ul> <li>Limited storage capacity (typically 5-10MB)</li> <li>Data is specific to a browser and device</li> <li>No synchronization between devices</li> </ul>"},{"location":"next_state/technical/#622-in-memory-state","title":"6.2.2. In-memory State","text":"<p>During runtime, the application maintains an in-memory state that is synchronized with LocalStorage. This approach provides:</p> <ul> <li>Fast access to data during user interactions</li> <li>Ability to make temporary changes before persisting</li> <li>Simplified state management through Vue.js reactivity</li> </ul>"},{"location":"next_state/technical/#63-framework-and-libraries","title":"6.3. Framework and Libraries","text":""},{"location":"next_state/technical/#631-vuejs-framework","title":"6.3.1. Vue.js Framework","text":"<p>The application is built using the Vue.js framework, which provides:</p> <ul> <li>Component-based architecture</li> <li>Reactive data binding</li> <li>Declarative templating</li> <li>Event handling system</li> <li>State management</li> </ul>"},{"location":"next_state/technical/#632-interactive-selection","title":"6.3.2. Interactive Selection","text":"<p>The application implements interactive selection through:</p> <ul> <li>Click/tap event handlers</li> <li>Vue.js reactive data binding</li> <li>CSS transitions for visual feedback</li> </ul>"},{"location":"next_state/technical/#633-css-implementation","title":"6.3.3. CSS Implementation","text":"<p>The application uses Tailwind CSS for styling with these specific utility classes:</p> <pre><code>+----------------------------------+\n| Responsive Layout Classes        |\n+----------------------------------+\n| Mobile (Default):                |\n| - grid-cols-2                    |\n| - p-4                            |\n| - text-sm                        |\n|                                  |\n| Tablet+ (sm:):                   |\n| - sm:grid-cols-3                 |\n| - sm:p-6                         |\n| - sm:gap-4                       |\n+----------------------------------+\n</code></pre> <p>Key component-specific classes: - <code>dashboard-grid-card</code>: Base styling for album cards - <code>dashboard-stars</code>: Styling for star rating display - <code>fixed inset-0</code>: Full-screen overlay for sidebar panels - <code>max-w-sm</code>: Width constraint for sidebar on larger screens - <code>bg-white shadow-xl</code>: Visual styling for panels - <code>flex flex-col flex-grow</code>: Layout structure for tab containers - <code>sticky top-14 z-10</code>: Positioning for fixed tab navigation</p>"},{"location":"next_state/user_experience/","title":"User Experience","text":""},{"location":"next_state/user_experience/#accessibility-features","title":"Accessibility Features","text":"<p>The application includes several accessibility features to ensure usability for a wide range of users:</p>"},{"location":"next_state/user_experience/#keyboard-navigation","title":"Keyboard Navigation","text":"<p>The application supports keyboard navigation for users who prefer or require it.</p>"},{"location":"next_state/user_experience/#screen-reader-compatibility","title":"Screen Reader Compatibility","text":"<p>The application uses semantic HTML and ARIA attributes to ensure compatibility with screen readers.</p>"},{"location":"next_state/user_experience/#visual-design-considerations","title":"Visual Design Considerations","text":"<p>The application's visual design incorporates high contrast colors and clear typography to enhance readability.</p>"},{"location":"next_state/user_experience/#responsive-design","title":"Responsive Design","text":"<p>The application is designed to adapt to various screen sizes and devices:</p>"},{"location":"next_state/user_experience/#721-mobile-view","title":"7.2.1. Mobile View","text":"<p>The application's mobile view is optimized for smaller screens, with a focus on simplicity and ease of use.</p>"},{"location":"next_state/user_experience/#722-tablet-view","title":"7.2.2. Tablet View","text":"<p>The application's tablet view takes advantage of the larger screen size, providing a more detailed and interactive experience.</p>"},{"location":"next_state/user_experience/#723-desktop-view","title":"7.2.3. Desktop View","text":"<p>The application's desktop view offers the most comprehensive and feature-rich experience, with a focus on productivity and customization.</p>"},{"location":"next_state/user_experience/#73-performance-considerations","title":"7.3. Performance Considerations","text":"<p>The application is designed to provide a fast and seamless user experience:</p>"},{"location":"next_state/user_experience/#731-current-rendering-approach","title":"7.3.1. Current Rendering Approach","text":"<p>The application uses a combination of server-side rendering and client-side rendering to optimize performance.</p>"},{"location":"next_state/user_experience/#732-data-management","title":"7.3.2. Data Management","text":"<p>The application uses a robust data management system to ensure efficient storage and retrieval of user data.</p>"},{"location":"next_state/user_experience/#733-resource-usage","title":"7.3.3. Resource Usage","text":"<p>The application is designed to minimize resource usage, ensuring a smooth experience even on lower-end devices.</p>"},{"location":"sprint/final_solution/","title":"Final Solution","text":"<p>This document outlines the chosen solution for implementing changes during the sprint from v1.0 to v1.1.</p>"},{"location":"sprint/final_solution/#decision-summary","title":"Decision Summary","text":"<p>After evaluating all possible solutions, the following approach has been selected for implementation:</p>"},{"location":"sprint/final_solution/#featurearea-1-name","title":"Feature/Area 1: [Name]","text":"<p>Selected Solution: [Option X]</p> <p>Rationale: [Explanation of why this solution was chosen over alternatives]</p> <p>Implementation Details: - [Detail 1] - [Detail 2] - [Detail 3]</p> <p>Technical Specifications: - [Specification 1] - [Specification 2]</p> <p>User Experience Considerations: - [Consideration 1] - [Consideration 2]</p>"},{"location":"sprint/final_solution/#featurearea-2-name","title":"Feature/Area 2: [Name]","text":"<p>Selected Solution: [Option X]</p> <p>Rationale: [Explanation of why this solution was chosen over alternatives]</p> <p>Implementation Details: - [Detail 1] - [Detail 2] - [Detail 3]</p> <p>Technical Specifications: - [Specification 1] - [Specification 2]</p> <p>User Experience Considerations: - [Consideration 1] - [Consideration 2]</p>"},{"location":"sprint/final_solution/#integration-points","title":"Integration Points","text":"<p>[Description of how the selected solutions will integrate with each other and the existing system]</p>"},{"location":"sprint/final_solution/#testing-strategy","title":"Testing Strategy","text":"<p>[Overview of how the implementation will be tested]</p>"},{"location":"sprint/final_solution/#rollback-plan","title":"Rollback Plan","text":"<p>[Description of how to roll back changes if implementation issues arise]</p>"},{"location":"sprint/impact_analysis/","title":"Impact Analysis","text":"<p>This document analyzes which files in the application will change during the sprint from v1.0 to v1.1.</p>"},{"location":"sprint/impact_analysis/#files-to-be-modified","title":"Files to be Modified","text":""},{"location":"sprint/impact_analysis/#frontend-components","title":"Frontend Components","text":"File Path Current Purpose Planned Changes Impact Level [File Path 1] [Current Purpose] [Planned Changes] [Low/Medium/High] [File Path 2] [Current Purpose] [Planned Changes] [Low/Medium/High]"},{"location":"sprint/impact_analysis/#backend-services","title":"Backend Services","text":"File Path Current Purpose Planned Changes Impact Level [File Path 1] [Current Purpose] [Planned Changes] [Low/Medium/High] [File Path 2] [Current Purpose] [Planned Changes] [Low/Medium/High]"},{"location":"sprint/impact_analysis/#configuration-files","title":"Configuration Files","text":"File Path Current Purpose Planned Changes Impact Level [File Path 1] [Current Purpose] [Planned Changes] [Low/Medium/High] [File Path 2] [Current Purpose] [Planned Changes] [Low/Medium/High]"},{"location":"sprint/impact_analysis/#dependency-analysis","title":"Dependency Analysis","text":"<ul> <li>[Dependency 1] - [Impact]</li> <li>[Dependency 2] - [Impact]</li> </ul>"},{"location":"sprint/impact_analysis/#risk-assessment","title":"Risk Assessment","text":"<ul> <li>[Risk 1] - [Mitigation Strategy]</li> <li>[Risk 2] - [Mitigation Strategy]</li> </ul>"},{"location":"sprint/impact_analysis/#testing-requirements","title":"Testing Requirements","text":"<ul> <li>[Test Case 1]</li> <li>[Test Case 2]</li> </ul>"},{"location":"sprint/implementation_plan/","title":"Implementation Plan","text":"<p>This document outlines how the final solution will be implemented during the sprint from v1.0 to v1.1.</p>"},{"location":"sprint/implementation_plan/#implementation-timeline","title":"Implementation Timeline","text":"Phase Start Date End Date Deliverables Planning [YYYY-MM-DD] [YYYY-MM-DD] [Deliverables] Development [YYYY-MM-DD] [YYYY-MM-DD] [Deliverables] Testing [YYYY-MM-DD] [YYYY-MM-DD] [Deliverables] Deployment [YYYY-MM-DD] [YYYY-MM-DD] [Deliverables]"},{"location":"sprint/implementation_plan/#task-breakdown","title":"Task Breakdown","text":""},{"location":"sprint/implementation_plan/#phase-1-planning","title":"Phase 1: Planning","text":"Task Assignee Estimated Hours Dependencies Status [Task 1] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed] [Task 2] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed]"},{"location":"sprint/implementation_plan/#phase-2-development","title":"Phase 2: Development","text":"Task Assignee Estimated Hours Dependencies Status [Task 1] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed] [Task 2] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed]"},{"location":"sprint/implementation_plan/#phase-3-testing","title":"Phase 3: Testing","text":"Task Assignee Estimated Hours Dependencies Status [Task 1] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed] [Task 2] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed]"},{"location":"sprint/implementation_plan/#phase-4-deployment","title":"Phase 4: Deployment","text":"Task Assignee Estimated Hours Dependencies Status [Task 1] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed] [Task 2] [Assignee] [Hours] [Dependencies] [Pending/In-Progress/Completed]"},{"location":"sprint/implementation_plan/#resource-allocation","title":"Resource Allocation","text":"Resource Allocation Notes [Resource 1] [Allocation] [Notes] [Resource 2] [Allocation] [Notes]"},{"location":"sprint/implementation_plan/#dependencies-and-blockers","title":"Dependencies and Blockers","text":"Dependency/Blocker Impact Mitigation Strategy Status [Dependency 1] [Impact] [Strategy] [Status] [Dependency 2] [Impact] [Strategy] [Status]"},{"location":"sprint/implementation_plan/#milestones-and-checkpoints","title":"Milestones and Checkpoints","text":"Milestone Date Criteria Status [Milestone 1] [Date] [Criteria] [Status] [Milestone 2] [Date] [Criteria] [Status]"},{"location":"sprint/possible_solutions/","title":"Possible Solutions","text":"<p>This document outlines the options for optimal user experience in the areas that will change during the sprint from v1.0 to v1.1.</p>"},{"location":"sprint/possible_solutions/#featurearea-1-name","title":"Feature/Area 1: [Name]","text":""},{"location":"sprint/possible_solutions/#option-1","title":"Option 1","text":"<p>Description: [Detailed description of the solution]</p> <p>Pros: - [Pro 1] - [Pro 2] - [Pro 3]</p> <p>Cons: - [Con 1] - [Con 2]</p> <p>Technical Considerations: - [Consideration 1] - [Consideration 2]</p> <p>User Experience Impact: [Description of how this option would affect the user experience]</p>"},{"location":"sprint/possible_solutions/#option-2","title":"Option 2","text":"<p>Description: [Detailed description of the solution]</p> <p>Pros: - [Pro 1] - [Pro 2] - [Pro 3]</p> <p>Cons: - [Con 1] - [Con 2]</p> <p>Technical Considerations: - [Consideration 1] - [Consideration 2]</p> <p>User Experience Impact: [Description of how this option would affect the user experience]</p>"},{"location":"sprint/possible_solutions/#featurearea-2-name","title":"Feature/Area 2: [Name]","text":""},{"location":"sprint/possible_solutions/#option-1_1","title":"Option 1","text":"<p>Description: [Detailed description of the solution]</p> <p>Pros: - [Pro 1] - [Pro 2] - [Pro 3]</p> <p>Cons: - [Con 1] - [Con 2]</p> <p>Technical Considerations: - [Consideration 1] - [Consideration 2]</p> <p>User Experience Impact: [Description of how this option would affect the user experience]</p>"},{"location":"sprint/possible_solutions/#option-2_1","title":"Option 2","text":"<p>Description: [Detailed description of the solution]</p> <p>Pros: - [Pro 1] - [Pro 2] - [Pro 3]</p> <p>Cons: - [Con 1] - [Con 2]</p> <p>Technical Considerations: - [Consideration 1] - [Consideration 2]</p> <p>User Experience Impact: [Description of how this option would affect the user experience]</p>"},{"location":"sprint/sprint_plan/","title":"Sprint Plan","text":"<p>This document outlines the plan for the sprint to move from the current state (v1.0) to the next state (v1.1).</p>"},{"location":"sprint/sprint_plan/#sprint-goals","title":"Sprint Goals","text":"<ul> <li>[Goal 1]</li> <li>[Goal 2]</li> <li>[Goal 3]</li> </ul>"},{"location":"sprint/sprint_plan/#sprint-duration","title":"Sprint Duration","text":"<ul> <li>Start Date: [YYYY-MM-DD]</li> <li>End Date: [YYYY-MM-DD]</li> </ul>"},{"location":"sprint/sprint_plan/#sprint-scope","title":"Sprint Scope","text":""},{"location":"sprint/sprint_plan/#in-scope","title":"In Scope","text":"<ul> <li>[Feature/Task 1]</li> <li>[Feature/Task 2]</li> <li>[Feature/Task 3]</li> </ul>"},{"location":"sprint/sprint_plan/#out-of-scope","title":"Out of Scope","text":"<ul> <li>[Feature/Task 1]</li> <li>[Feature/Task 2]</li> </ul>"},{"location":"sprint/sprint_plan/#sprint-team","title":"Sprint Team","text":"<ul> <li>[Team Member 1] - [Role]</li> <li>[Team Member 2] - [Role]</li> <li>[Team Member 3] - [Role]</li> </ul>"},{"location":"sprint/sprint_plan/#success-criteria","title":"Success Criteria","text":"<ul> <li>[Criterion 1]</li> <li>[Criterion 2]</li> <li>[Criterion 3]</li> </ul>"},{"location":"sprint/sprint_plan/#risk-assessment","title":"Risk Assessment","text":"Risk Likelihood Impact Mitigation Strategy [Risk 1] [Low/Medium/High] [Low/Medium/High] [Strategy] [Risk 2] [Low/Medium/High] [Low/Medium/High] [Strategy]"},{"location":"sprint/sprint_retrospective/","title":"Sprint Retrospective","text":"<p>This document provides a retrospective analysis of the sprint from v1.0 to v1.1.</p>"},{"location":"sprint/sprint_retrospective/#sprint-summary","title":"Sprint Summary","text":"<p>Sprint Goals: - [Goal 1] - [Goal 2] - [Goal 3]</p> <p>Sprint Duration: - Start Date: [YYYY-MM-DD] - End Date: [YYYY-MM-DD]</p>"},{"location":"sprint/sprint_retrospective/#completed-tasks","title":"Completed Tasks","text":"Task Assignee Planned Hours Actual Hours Status [Task 1] [Assignee] [Hours] [Hours] Completed [Task 2] [Assignee] [Hours] [Hours] Completed"},{"location":"sprint/sprint_retrospective/#incomplete-tasks","title":"Incomplete Tasks","text":"Task Assignee Planned Hours Actual Hours Status Reason [Task 1] [Assignee] [Hours] [Hours] Incomplete [Reason] [Task 2] [Assignee] [Hours] [Hours] Incomplete [Reason]"},{"location":"sprint/sprint_retrospective/#sprint-deviations","title":"Sprint Deviations","text":"<p>[Description of any deviations from the original sprint plan and why they occurred]</p>"},{"location":"sprint/sprint_retrospective/#documentation-updates","title":"Documentation Updates","text":"<p>[Summary of documentation updates made during the sprint]</p>"},{"location":"sprint/sprint_retrospective/#lessons-learned","title":"Lessons Learned","text":""},{"location":"sprint/sprint_retrospective/#what-went-well","title":"What Went Well","text":"<ul> <li>[Item 1]</li> <li>[Item 2]</li> <li>[Item 3]</li> </ul>"},{"location":"sprint/sprint_retrospective/#what-could-be-improved","title":"What Could Be Improved","text":"<ul> <li>[Item 1]</li> <li>[Item 2]</li> <li>[Item 3]</li> </ul>"},{"location":"sprint/sprint_retrospective/#action-items-for-future-sprints","title":"Action Items for Future Sprints","text":"<ul> <li>[Action Item 1]</li> <li>[Action Item 2]</li> <li>[Action Item 3]</li> </ul>"}]}